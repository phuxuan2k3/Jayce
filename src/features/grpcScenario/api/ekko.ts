/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: api/ekko.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
 import * as dependency_1 from "../google/protobuf/timestamp";
 import * as dependency_2 from "../google/protobuf/empty";
 import * as dependency_3 from "../validate/validate";
 import * as pb_1 from "google-protobuf";
 import * as grpc_1 from "@grpc/grpc-js";
 import * as grpc_web_1 from "grpc-web";
 export namespace ekko {
     export enum SubmissionStatus {
         SUBMISSION_STATUS_UNKNOWN = 0,
         SUBMISSION_STATUS_IN_PROGRESS = 1,
         SUBMISSION_STATUS_FAILED = 2,
         SUBMISSION_STATUS_SUCCESS = 3
     }
     export enum SortType {
         SORT_TYPE_UNKNOWN = 0,
         SORT_TYPE_ASC = 1,
         SORT_TYPE_DESC = 2
     }
     export enum PublicationStatus {
         PUBLICATION_STATUS_UNKNOWN = 0,
         PUBLICATION_STATUS_DRAFT = 1,
         PUBLICATION_STATUS_PUBLISHED = 2
     }
     export class Answer extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             question_id?: number;
             answer?: string;
             relevance?: number;
             clarity_completeness?: number;
             accuracy?: number;
             overall?: number;
             status?: SubmissionStatus;
             base_data?: BaseData;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("question_id" in data && data.question_id != undefined) {
                     this.question_id = data.question_id;
                 }
                 if ("answer" in data && data.answer != undefined) {
                     this.answer = data.answer;
                 }
                 if ("relevance" in data && data.relevance != undefined) {
                     this.relevance = data.relevance;
                 }
                 if ("clarity_completeness" in data && data.clarity_completeness != undefined) {
                     this.clarity_completeness = data.clarity_completeness;
                 }
                 if ("accuracy" in data && data.accuracy != undefined) {
                     this.accuracy = data.accuracy;
                 }
                 if ("overall" in data && data.overall != undefined) {
                     this.overall = data.overall;
                 }
                 if ("status" in data && data.status != undefined) {
                     this.status = data.status;
                 }
                 if ("base_data" in data && data.base_data != undefined) {
                     this.base_data = data.base_data;
                 }
             }
         }
         get question_id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set question_id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get answer() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set answer(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get relevance() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set relevance(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get clarity_completeness() {
             return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
         }
         set clarity_completeness(value: number) {
             pb_1.Message.setField(this, 4, value);
         }
         get accuracy() {
             return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
         }
         set accuracy(value: number) {
             pb_1.Message.setField(this, 5, value);
         }
         get overall() {
             return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
         }
         set overall(value: number) {
             pb_1.Message.setField(this, 6, value);
         }
         get status() {
             return pb_1.Message.getFieldWithDefault(this, 7, SubmissionStatus.SUBMISSION_STATUS_UNKNOWN) as SubmissionStatus;
         }
         set status(value: SubmissionStatus) {
             pb_1.Message.setField(this, 7, value);
         }
         get base_data() {
             return pb_1.Message.getWrapperField(this, BaseData, 8) as BaseData;
         }
         set base_data(value: BaseData) {
             pb_1.Message.setWrapperField(this, 8, value);
         }
         get has_base_data() {
             return pb_1.Message.getField(this, 8) != null;
         }
         static fromObject(data: {
             question_id?: number;
             answer?: string;
             relevance?: number;
             clarity_completeness?: number;
             accuracy?: number;
             overall?: number;
             status?: SubmissionStatus;
             base_data?: ReturnType<typeof BaseData.prototype.toObject>;
         }): Answer {
             const message = new Answer({});
             if (data.question_id != null) {
                 message.question_id = data.question_id;
             }
             if (data.answer != null) {
                 message.answer = data.answer;
             }
             if (data.relevance != null) {
                 message.relevance = data.relevance;
             }
             if (data.clarity_completeness != null) {
                 message.clarity_completeness = data.clarity_completeness;
             }
             if (data.accuracy != null) {
                 message.accuracy = data.accuracy;
             }
             if (data.overall != null) {
                 message.overall = data.overall;
             }
             if (data.status != null) {
                 message.status = data.status;
             }
             if (data.base_data != null) {
                 message.base_data = BaseData.fromObject(data.base_data);
             }
             return message;
         }
         toObject() {
             const data: {
                 question_id?: number;
                 answer?: string;
                 relevance?: number;
                 clarity_completeness?: number;
                 accuracy?: number;
                 overall?: number;
                 status?: SubmissionStatus;
                 base_data?: ReturnType<typeof BaseData.prototype.toObject>;
             } = {};
             if (this.question_id != null) {
                 data.question_id = this.question_id;
             }
             if (this.answer != null) {
                 data.answer = this.answer;
             }
             if (this.relevance != null) {
                 data.relevance = this.relevance;
             }
             if (this.clarity_completeness != null) {
                 data.clarity_completeness = this.clarity_completeness;
             }
             if (this.accuracy != null) {
                 data.accuracy = this.accuracy;
             }
             if (this.overall != null) {
                 data.overall = this.overall;
             }
             if (this.status != null) {
                 data.status = this.status;
             }
             if (this.base_data != null) {
                 data.base_data = this.base_data.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.question_id != 0)
                 writer.writeUint64(1, this.question_id);
             if (this.answer.length)
                 writer.writeString(2, this.answer);
             if (this.relevance != 0)
                 writer.writeFloat(3, this.relevance);
             if (this.clarity_completeness != 0)
                 writer.writeFloat(4, this.clarity_completeness);
             if (this.accuracy != 0)
                 writer.writeFloat(5, this.accuracy);
             if (this.overall != 0)
                 writer.writeFloat(6, this.overall);
             if (this.status != SubmissionStatus.SUBMISSION_STATUS_UNKNOWN)
                 writer.writeEnum(7, this.status);
             if (this.has_base_data)
                 writer.writeMessage(8, this.base_data, () => this.base_data.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Answer {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Answer();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.question_id = reader.readUint64();
                         break;
                     case 2:
                         message.answer = reader.readString();
                         break;
                     case 3:
                         message.relevance = reader.readFloat();
                         break;
                     case 4:
                         message.clarity_completeness = reader.readFloat();
                         break;
                     case 5:
                         message.accuracy = reader.readFloat();
                         break;
                     case 6:
                         message.overall = reader.readFloat();
                         break;
                     case 7:
                         message.status = reader.readEnum();
                         break;
                     case 8:
                         reader.readMessage(message.base_data, () => message.base_data = BaseData.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Answer {
             return Answer.deserialize(bytes);
         }
     }
     export class Attempt extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             scenario_id?: number;
             answers?: Answer[];
             base_data?: BaseData;
             attempt_number?: number;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("scenario_id" in data && data.scenario_id != undefined) {
                     this.scenario_id = data.scenario_id;
                 }
                 if ("answers" in data && data.answers != undefined) {
                     this.answers = data.answers;
                 }
                 if ("base_data" in data && data.base_data != undefined) {
                     this.base_data = data.base_data;
                 }
                 if ("attempt_number" in data && data.attempt_number != undefined) {
                     this.attempt_number = data.attempt_number;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get scenario_id() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set scenario_id(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get answers() {
             return pb_1.Message.getRepeatedWrapperField(this, Answer, 3) as Answer[];
         }
         set answers(value: Answer[]) {
             pb_1.Message.setRepeatedWrapperField(this, 3, value);
         }
         get base_data() {
             return pb_1.Message.getWrapperField(this, BaseData, 4) as BaseData;
         }
         set base_data(value: BaseData) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_base_data() {
             return pb_1.Message.getField(this, 4) != null;
         }
         get attempt_number() {
             return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
         }
         set attempt_number(value: number) {
             pb_1.Message.setField(this, 5, value);
         }
         static fromObject(data: {
             id?: number;
             scenario_id?: number;
             answers?: ReturnType<typeof Answer.prototype.toObject>[];
             base_data?: ReturnType<typeof BaseData.prototype.toObject>;
             attempt_number?: number;
         }): Attempt {
             const message = new Attempt({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.scenario_id != null) {
                 message.scenario_id = data.scenario_id;
             }
             if (data.answers != null) {
                 message.answers = data.answers.map(item => Answer.fromObject(item));
             }
             if (data.base_data != null) {
                 message.base_data = BaseData.fromObject(data.base_data);
             }
             if (data.attempt_number != null) {
                 message.attempt_number = data.attempt_number;
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 scenario_id?: number;
                 answers?: ReturnType<typeof Answer.prototype.toObject>[];
                 base_data?: ReturnType<typeof BaseData.prototype.toObject>;
                 attempt_number?: number;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.scenario_id != null) {
                 data.scenario_id = this.scenario_id;
             }
             if (this.answers != null) {
                 data.answers = this.answers.map((item: Answer) => item.toObject());
             }
             if (this.base_data != null) {
                 data.base_data = this.base_data.toObject();
             }
             if (this.attempt_number != null) {
                 data.attempt_number = this.attempt_number;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.scenario_id != 0)
                 writer.writeUint64(2, this.scenario_id);
             if (this.answers.length)
                 writer.writeRepeatedMessage(3, this.answers, (item: Answer) => item.serialize(writer));
             if (this.has_base_data)
                 writer.writeMessage(4, this.base_data, () => this.base_data.serialize(writer));
             if (this.attempt_number != 0)
                 writer.writeInt32(5, this.attempt_number);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attempt {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attempt();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.scenario_id = reader.readUint64();
                         break;
                     case 3:
                         reader.readMessage(message.answers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Answer.deserialize(reader), Answer));
                         break;
                     case 4:
                         reader.readMessage(message.base_data, () => message.base_data = BaseData.deserialize(reader));
                         break;
                     case 5:
                         message.attempt_number = reader.readInt32();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Attempt {
             return Attempt.deserialize(bytes);
         }
     }
     export class Submission extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             scenario_id?: number;
             candidate_id?: number;
             attempts?: Attempt[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("scenario_id" in data && data.scenario_id != undefined) {
                     this.scenario_id = data.scenario_id;
                 }
                 if ("candidate_id" in data && data.candidate_id != undefined) {
                     this.candidate_id = data.candidate_id;
                 }
                 if ("attempts" in data && data.attempts != undefined) {
                     this.attempts = data.attempts;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get scenario_id() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set scenario_id(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get candidate_id() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set candidate_id(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get attempts() {
             return pb_1.Message.getRepeatedWrapperField(this, Attempt, 4) as Attempt[];
         }
         set attempts(value: Attempt[]) {
             pb_1.Message.setRepeatedWrapperField(this, 4, value);
         }
         static fromObject(data: {
             id?: number;
             scenario_id?: number;
             candidate_id?: number;
             attempts?: ReturnType<typeof Attempt.prototype.toObject>[];
         }): Submission {
             const message = new Submission({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.scenario_id != null) {
                 message.scenario_id = data.scenario_id;
             }
             if (data.candidate_id != null) {
                 message.candidate_id = data.candidate_id;
             }
             if (data.attempts != null) {
                 message.attempts = data.attempts.map(item => Attempt.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 scenario_id?: number;
                 candidate_id?: number;
                 attempts?: ReturnType<typeof Attempt.prototype.toObject>[];
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.scenario_id != null) {
                 data.scenario_id = this.scenario_id;
             }
             if (this.candidate_id != null) {
                 data.candidate_id = this.candidate_id;
             }
             if (this.attempts != null) {
                 data.attempts = this.attempts.map((item: Attempt) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.scenario_id != 0)
                 writer.writeUint64(2, this.scenario_id);
             if (this.candidate_id != 0)
                 writer.writeUint64(3, this.candidate_id);
             if (this.attempts.length)
                 writer.writeRepeatedMessage(4, this.attempts, (item: Attempt) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Submission {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Submission();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.scenario_id = reader.readUint64();
                         break;
                     case 3:
                         message.candidate_id = reader.readUint64();
                         break;
                     case 4:
                         reader.readMessage(message.attempts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Attempt.deserialize(reader), Attempt));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Submission {
             return Submission.deserialize(bytes);
         }
     }
     export class SortMethod extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             name?: string;
             type?: SortType;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
                 if ("type" in data && data.type != undefined) {
                     this.type = data.type;
                 }
             }
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 1, value);
         }
         get type() {
             return pb_1.Message.getFieldWithDefault(this, 2, SortType.SORT_TYPE_UNKNOWN) as SortType;
         }
         set type(value: SortType) {
             pb_1.Message.setField(this, 2, value);
         }
         static fromObject(data: {
             name?: string;
             type?: SortType;
         }): SortMethod {
             const message = new SortMethod({});
             if (data.name != null) {
                 message.name = data.name;
             }
             if (data.type != null) {
                 message.type = data.type;
             }
             return message;
         }
         toObject() {
             const data: {
                 name?: string;
                 type?: SortType;
             } = {};
             if (this.name != null) {
                 data.name = this.name;
             }
             if (this.type != null) {
                 data.type = this.type;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.name.length)
                 writer.writeString(1, this.name);
             if (this.type != SortType.SORT_TYPE_UNKNOWN)
                 writer.writeEnum(2, this.type);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortMethod {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortMethod();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.name = reader.readString();
                         break;
                     case 2:
                         message.type = reader.readEnum();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): SortMethod {
             return SortMethod.deserialize(bytes);
         }
     }
     export class BaseData extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             created_at?: dependency_1.google.protobuf.Timestamp;
             updated_at?: dependency_1.google.protobuf.Timestamp;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("created_at" in data && data.created_at != undefined) {
                     this.created_at = data.created_at;
                 }
                 if ("updated_at" in data && data.updated_at != undefined) {
                     this.updated_at = data.updated_at;
                 }
             }
         }
         get created_at() {
             return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
         }
         set created_at(value: dependency_1.google.protobuf.Timestamp) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_created_at() {
             return pb_1.Message.getField(this, 1) != null;
         }
         get updated_at() {
             return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
         }
         set updated_at(value: dependency_1.google.protobuf.Timestamp) {
             pb_1.Message.setWrapperField(this, 2, value);
         }
         get has_updated_at() {
             return pb_1.Message.getField(this, 2) != null;
         }
         static fromObject(data: {
             created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
             updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
         }): BaseData {
             const message = new BaseData({});
             if (data.created_at != null) {
                 message.created_at = dependency_1.google.protobuf.Timestamp.fromObject(data.created_at);
             }
             if (data.updated_at != null) {
                 message.updated_at = dependency_1.google.protobuf.Timestamp.fromObject(data.updated_at);
             }
             return message;
         }
         toObject() {
             const data: {
                 created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                 updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
             } = {};
             if (this.created_at != null) {
                 data.created_at = this.created_at.toObject();
             }
             if (this.updated_at != null) {
                 data.updated_at = this.updated_at.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_created_at)
                 writer.writeMessage(1, this.created_at, () => this.created_at.serialize(writer));
             if (this.has_updated_at)
                 writer.writeMessage(2, this.updated_at, () => this.updated_at.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseData {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseData();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.created_at, () => message.created_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                         break;
                     case 2:
                         reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): BaseData {
             return BaseData.deserialize(bytes);
         }
     }
     export class Field extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             name?: string;
             base_data?: BaseData;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
                 if ("base_data" in data && data.base_data != undefined) {
                     this.base_data = data.base_data;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get base_data() {
             return pb_1.Message.getWrapperField(this, BaseData, 3) as BaseData;
         }
         set base_data(value: BaseData) {
             pb_1.Message.setWrapperField(this, 3, value);
         }
         get has_base_data() {
             return pb_1.Message.getField(this, 3) != null;
         }
         static fromObject(data: {
             id?: number;
             name?: string;
             base_data?: ReturnType<typeof BaseData.prototype.toObject>;
         }): Field {
             const message = new Field({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.name != null) {
                 message.name = data.name;
             }
             if (data.base_data != null) {
                 message.base_data = BaseData.fromObject(data.base_data);
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 name?: string;
                 base_data?: ReturnType<typeof BaseData.prototype.toObject>;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.name != null) {
                 data.name = this.name;
             }
             if (this.base_data != null) {
                 data.base_data = this.base_data.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.name.length)
                 writer.writeString(2, this.name);
             if (this.has_base_data)
                 writer.writeMessage(3, this.base_data, () => this.base_data.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Field {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Field();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.name = reader.readString();
                         break;
                     case 3:
                         reader.readMessage(message.base_data, () => message.base_data = BaseData.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Field {
             return Field.deserialize(bytes);
         }
     }
     export class Scenario extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             name?: string;
             description?: string;
             base_data?: BaseData;
             rating?: number;
             fields?: Field[];
             total_participant?: number;
             questions?: Question[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 8], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
                 if ("description" in data && data.description != undefined) {
                     this.description = data.description;
                 }
                 if ("base_data" in data && data.base_data != undefined) {
                     this.base_data = data.base_data;
                 }
                 if ("rating" in data && data.rating != undefined) {
                     this.rating = data.rating;
                 }
                 if ("fields" in data && data.fields != undefined) {
                     this.fields = data.fields;
                 }
                 if ("total_participant" in data && data.total_participant != undefined) {
                     this.total_participant = data.total_participant;
                 }
                 if ("questions" in data && data.questions != undefined) {
                     this.questions = data.questions;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get description() {
             return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
         }
         set description(value: string) {
             pb_1.Message.setField(this, 3, value);
         }
         get base_data() {
             return pb_1.Message.getWrapperField(this, BaseData, 4) as BaseData;
         }
         set base_data(value: BaseData) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_base_data() {
             return pb_1.Message.getField(this, 4) != null;
         }
         get rating() {
             return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
         }
         set rating(value: number) {
             pb_1.Message.setField(this, 5, value);
         }
         get fields() {
             return pb_1.Message.getRepeatedWrapperField(this, Field, 6) as Field[];
         }
         set fields(value: Field[]) {
             pb_1.Message.setRepeatedWrapperField(this, 6, value);
         }
         get total_participant() {
             return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
         }
         set total_participant(value: number) {
             pb_1.Message.setField(this, 7, value);
         }
         get questions() {
             return pb_1.Message.getRepeatedWrapperField(this, Question, 8) as Question[];
         }
         set questions(value: Question[]) {
             pb_1.Message.setRepeatedWrapperField(this, 8, value);
         }
         static fromObject(data: {
             id?: number;
             name?: string;
             description?: string;
             base_data?: ReturnType<typeof BaseData.prototype.toObject>;
             rating?: number;
             fields?: ReturnType<typeof Field.prototype.toObject>[];
             total_participant?: number;
             questions?: ReturnType<typeof Question.prototype.toObject>[];
         }): Scenario {
             const message = new Scenario({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.name != null) {
                 message.name = data.name;
             }
             if (data.description != null) {
                 message.description = data.description;
             }
             if (data.base_data != null) {
                 message.base_data = BaseData.fromObject(data.base_data);
             }
             if (data.rating != null) {
                 message.rating = data.rating;
             }
             if (data.fields != null) {
                 message.fields = data.fields.map(item => Field.fromObject(item));
             }
             if (data.total_participant != null) {
                 message.total_participant = data.total_participant;
             }
             if (data.questions != null) {
                 message.questions = data.questions.map(item => Question.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 name?: string;
                 description?: string;
                 base_data?: ReturnType<typeof BaseData.prototype.toObject>;
                 rating?: number;
                 fields?: ReturnType<typeof Field.prototype.toObject>[];
                 total_participant?: number;
                 questions?: ReturnType<typeof Question.prototype.toObject>[];
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.name != null) {
                 data.name = this.name;
             }
             if (this.description != null) {
                 data.description = this.description;
             }
             if (this.base_data != null) {
                 data.base_data = this.base_data.toObject();
             }
             if (this.rating != null) {
                 data.rating = this.rating;
             }
             if (this.fields != null) {
                 data.fields = this.fields.map((item: Field) => item.toObject());
             }
             if (this.total_participant != null) {
                 data.total_participant = this.total_participant;
             }
             if (this.questions != null) {
                 data.questions = this.questions.map((item: Question) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.name.length)
                 writer.writeString(2, this.name);
             if (this.description.length)
                 writer.writeString(3, this.description);
             if (this.has_base_data)
                 writer.writeMessage(4, this.base_data, () => this.base_data.serialize(writer));
             if (this.rating != 0)
                 writer.writeFloat(5, this.rating);
             if (this.fields.length)
                 writer.writeRepeatedMessage(6, this.fields, (item: Field) => item.serialize(writer));
             if (this.total_participant != 0)
                 writer.writeInt32(7, this.total_participant);
             if (this.questions.length)
                 writer.writeRepeatedMessage(8, this.questions, (item: Question) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Scenario {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Scenario();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.name = reader.readString();
                         break;
                     case 3:
                         message.description = reader.readString();
                         break;
                     case 4:
                         reader.readMessage(message.base_data, () => message.base_data = BaseData.deserialize(reader));
                         break;
                     case 5:
                         message.rating = reader.readFloat();
                         break;
                     case 6:
                         reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Field.deserialize(reader), Field));
                         break;
                     case 7:
                         message.total_participant = reader.readInt32();
                         break;
                     case 8:
                         reader.readMessage(message.questions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Question.deserialize(reader), Question));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Scenario {
             return Scenario.deserialize(bytes);
         }
     }
     export class Question extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             criteria?: string;
             hint?: string;
             content?: string;
             base_data?: BaseData;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("criteria" in data && data.criteria != undefined) {
                     this.criteria = data.criteria;
                 }
                 if ("hint" in data && data.hint != undefined) {
                     this.hint = data.hint;
                 }
                 if ("content" in data && data.content != undefined) {
                     this.content = data.content;
                 }
                 if ("base_data" in data && data.base_data != undefined) {
                     this.base_data = data.base_data;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get criteria() {
             return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
         }
         set criteria(value: string) {
             pb_1.Message.setField(this, 3, value);
         }
         get hint() {
             return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
         }
         set hint(value: string) {
             pb_1.Message.setField(this, 4, value);
         }
         get content() {
             return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
         }
         set content(value: string) {
             pb_1.Message.setField(this, 5, value);
         }
         get base_data() {
             return pb_1.Message.getWrapperField(this, BaseData, 6) as BaseData;
         }
         set base_data(value: BaseData) {
             pb_1.Message.setWrapperField(this, 6, value);
         }
         get has_base_data() {
             return pb_1.Message.getField(this, 6) != null;
         }
         static fromObject(data: {
             id?: number;
             criteria?: string;
             hint?: string;
             content?: string;
             base_data?: ReturnType<typeof BaseData.prototype.toObject>;
         }): Question {
             const message = new Question({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.criteria != null) {
                 message.criteria = data.criteria;
             }
             if (data.hint != null) {
                 message.hint = data.hint;
             }
             if (data.content != null) {
                 message.content = data.content;
             }
             if (data.base_data != null) {
                 message.base_data = BaseData.fromObject(data.base_data);
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 criteria?: string;
                 hint?: string;
                 content?: string;
                 base_data?: ReturnType<typeof BaseData.prototype.toObject>;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.criteria != null) {
                 data.criteria = this.criteria;
             }
             if (this.hint != null) {
                 data.hint = this.hint;
             }
             if (this.content != null) {
                 data.content = this.content;
             }
             if (this.base_data != null) {
                 data.base_data = this.base_data.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.criteria.length)
                 writer.writeString(3, this.criteria);
             if (this.hint.length)
                 writer.writeString(4, this.hint);
             if (this.content.length)
                 writer.writeString(5, this.content);
             if (this.has_base_data)
                 writer.writeMessage(6, this.base_data, () => this.base_data.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Question {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Question();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 3:
                         message.criteria = reader.readString();
                         break;
                     case 4:
                         message.hint = reader.readString();
                         break;
                     case 5:
                         message.content = reader.readString();
                         break;
                     case 6:
                         reader.readMessage(message.base_data, () => message.base_data = BaseData.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): Question {
             return Question.deserialize(bytes);
         }
     }
     export class ListAllSubmissionRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario_id?: number;
             page_index?: number;
             page_size?: number;
             sort_method?: SortMethod[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario_id" in data && data.scenario_id != undefined) {
                     this.scenario_id = data.scenario_id;
                 }
                 if ("page_index" in data && data.page_index != undefined) {
                     this.page_index = data.page_index;
                 }
                 if ("page_size" in data && data.page_size != undefined) {
                     this.page_size = data.page_size;
                 }
                 if ("sort_method" in data && data.sort_method != undefined) {
                     this.sort_method = data.sort_method;
                 }
             }
         }
         get scenario_id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set scenario_id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get page_index() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set page_index(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get page_size() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set page_size(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get sort_method() {
             return pb_1.Message.getRepeatedWrapperField(this, SortMethod, 4) as SortMethod[];
         }
         set sort_method(value: SortMethod[]) {
             pb_1.Message.setRepeatedWrapperField(this, 4, value);
         }
         static fromObject(data: {
             scenario_id?: number;
             page_index?: number;
             page_size?: number;
             sort_method?: ReturnType<typeof SortMethod.prototype.toObject>[];
         }): ListAllSubmissionRequest {
             const message = new ListAllSubmissionRequest({});
             if (data.scenario_id != null) {
                 message.scenario_id = data.scenario_id;
             }
             if (data.page_index != null) {
                 message.page_index = data.page_index;
             }
             if (data.page_size != null) {
                 message.page_size = data.page_size;
             }
             if (data.sort_method != null) {
                 message.sort_method = data.sort_method.map(item => SortMethod.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario_id?: number;
                 page_index?: number;
                 page_size?: number;
                 sort_method?: ReturnType<typeof SortMethod.prototype.toObject>[];
             } = {};
             if (this.scenario_id != null) {
                 data.scenario_id = this.scenario_id;
             }
             if (this.page_index != null) {
                 data.page_index = this.page_index;
             }
             if (this.page_size != null) {
                 data.page_size = this.page_size;
             }
             if (this.sort_method != null) {
                 data.sort_method = this.sort_method.map((item: SortMethod) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.scenario_id != 0)
                 writer.writeUint64(1, this.scenario_id);
             if (this.page_index != 0)
                 writer.writeInt32(2, this.page_index);
             if (this.page_size != 0)
                 writer.writeInt32(3, this.page_size);
             if (this.sort_method.length)
                 writer.writeRepeatedMessage(4, this.sort_method, (item: SortMethod) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllSubmissionRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllSubmissionRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.scenario_id = reader.readUint64();
                         break;
                     case 2:
                         message.page_index = reader.readInt32();
                         break;
                     case 3:
                         message.page_size = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.sort_method, () => pb_1.Message.addToRepeatedWrapperField(message, 4, SortMethod.deserialize(reader), SortMethod));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListAllSubmissionRequest {
             return ListAllSubmissionRequest.deserialize(bytes);
         }
     }
     export class ListAllSubmissionResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             submissions?: Submission[];
             total_count?: number;
             total_page?: number;
             request?: ListAllSubmissionRequest;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("submissions" in data && data.submissions != undefined) {
                     this.submissions = data.submissions;
                 }
                 if ("total_count" in data && data.total_count != undefined) {
                     this.total_count = data.total_count;
                 }
                 if ("total_page" in data && data.total_page != undefined) {
                     this.total_page = data.total_page;
                 }
                 if ("request" in data && data.request != undefined) {
                     this.request = data.request;
                 }
             }
         }
         get submissions() {
             return pb_1.Message.getRepeatedWrapperField(this, Submission, 1) as Submission[];
         }
         set submissions(value: Submission[]) {
             pb_1.Message.setRepeatedWrapperField(this, 1, value);
         }
         get total_count() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set total_count(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get total_page() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set total_page(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get request() {
             return pb_1.Message.getWrapperField(this, ListAllSubmissionRequest, 4) as ListAllSubmissionRequest;
         }
         set request(value: ListAllSubmissionRequest) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_request() {
             return pb_1.Message.getField(this, 4) != null;
         }
         static fromObject(data: {
             submissions?: ReturnType<typeof Submission.prototype.toObject>[];
             total_count?: number;
             total_page?: number;
             request?: ReturnType<typeof ListAllSubmissionRequest.prototype.toObject>;
         }): ListAllSubmissionResponse {
             const message = new ListAllSubmissionResponse({});
             if (data.submissions != null) {
                 message.submissions = data.submissions.map(item => Submission.fromObject(item));
             }
             if (data.total_count != null) {
                 message.total_count = data.total_count;
             }
             if (data.total_page != null) {
                 message.total_page = data.total_page;
             }
             if (data.request != null) {
                 message.request = ListAllSubmissionRequest.fromObject(data.request);
             }
             return message;
         }
         toObject() {
             const data: {
                 submissions?: ReturnType<typeof Submission.prototype.toObject>[];
                 total_count?: number;
                 total_page?: number;
                 request?: ReturnType<typeof ListAllSubmissionRequest.prototype.toObject>;
             } = {};
             if (this.submissions != null) {
                 data.submissions = this.submissions.map((item: Submission) => item.toObject());
             }
             if (this.total_count != null) {
                 data.total_count = this.total_count;
             }
             if (this.total_page != null) {
                 data.total_page = this.total_page;
             }
             if (this.request != null) {
                 data.request = this.request.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.submissions.length)
                 writer.writeRepeatedMessage(1, this.submissions, (item: Submission) => item.serialize(writer));
             if (this.total_count != 0)
                 writer.writeInt32(2, this.total_count);
             if (this.total_page != 0)
                 writer.writeInt32(3, this.total_page);
             if (this.has_request)
                 writer.writeMessage(4, this.request, () => this.request.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllSubmissionResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllSubmissionResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.submissions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Submission.deserialize(reader), Submission));
                         break;
                     case 2:
                         message.total_count = reader.readInt32();
                         break;
                     case 3:
                         message.total_page = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.request, () => message.request = ListAllSubmissionRequest.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListAllSubmissionResponse {
             return ListAllSubmissionResponse.deserialize(bytes);
         }
     }
     export class ListAttemptRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario_id?: number;
             page_index?: number;
             page_size?: number;
             sort_method?: SortMethod[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario_id" in data && data.scenario_id != undefined) {
                     this.scenario_id = data.scenario_id;
                 }
                 if ("page_index" in data && data.page_index != undefined) {
                     this.page_index = data.page_index;
                 }
                 if ("page_size" in data && data.page_size != undefined) {
                     this.page_size = data.page_size;
                 }
                 if ("sort_method" in data && data.sort_method != undefined) {
                     this.sort_method = data.sort_method;
                 }
             }
         }
         get scenario_id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set scenario_id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get page_index() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set page_index(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get page_size() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set page_size(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get sort_method() {
             return pb_1.Message.getRepeatedWrapperField(this, SortMethod, 4) as SortMethod[];
         }
         set sort_method(value: SortMethod[]) {
             pb_1.Message.setRepeatedWrapperField(this, 4, value);
         }
         static fromObject(data: {
             scenario_id?: number;
             page_index?: number;
             page_size?: number;
             sort_method?: ReturnType<typeof SortMethod.prototype.toObject>[];
         }): ListAttemptRequest {
             const message = new ListAttemptRequest({});
             if (data.scenario_id != null) {
                 message.scenario_id = data.scenario_id;
             }
             if (data.page_index != null) {
                 message.page_index = data.page_index;
             }
             if (data.page_size != null) {
                 message.page_size = data.page_size;
             }
             if (data.sort_method != null) {
                 message.sort_method = data.sort_method.map(item => SortMethod.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario_id?: number;
                 page_index?: number;
                 page_size?: number;
                 sort_method?: ReturnType<typeof SortMethod.prototype.toObject>[];
             } = {};
             if (this.scenario_id != null) {
                 data.scenario_id = this.scenario_id;
             }
             if (this.page_index != null) {
                 data.page_index = this.page_index;
             }
             if (this.page_size != null) {
                 data.page_size = this.page_size;
             }
             if (this.sort_method != null) {
                 data.sort_method = this.sort_method.map((item: SortMethod) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.scenario_id != 0)
                 writer.writeUint64(1, this.scenario_id);
             if (this.page_index != 0)
                 writer.writeInt32(2, this.page_index);
             if (this.page_size != 0)
                 writer.writeInt32(3, this.page_size);
             if (this.sort_method.length)
                 writer.writeRepeatedMessage(4, this.sort_method, (item: SortMethod) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAttemptRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAttemptRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.scenario_id = reader.readUint64();
                         break;
                     case 2:
                         message.page_index = reader.readInt32();
                         break;
                     case 3:
                         message.page_size = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.sort_method, () => pb_1.Message.addToRepeatedWrapperField(message, 4, SortMethod.deserialize(reader), SortMethod));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListAttemptRequest {
             return ListAttemptRequest.deserialize(bytes);
         }
     }
     export class ListAttemptResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             attempts?: Attempt[];
             total_count?: number;
             total_page?: number;
             request?: ListAttemptRequest;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("attempts" in data && data.attempts != undefined) {
                     this.attempts = data.attempts;
                 }
                 if ("total_count" in data && data.total_count != undefined) {
                     this.total_count = data.total_count;
                 }
                 if ("total_page" in data && data.total_page != undefined) {
                     this.total_page = data.total_page;
                 }
                 if ("request" in data && data.request != undefined) {
                     this.request = data.request;
                 }
             }
         }
         get attempts() {
             return pb_1.Message.getRepeatedWrapperField(this, Attempt, 1) as Attempt[];
         }
         set attempts(value: Attempt[]) {
             pb_1.Message.setRepeatedWrapperField(this, 1, value);
         }
         get total_count() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set total_count(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get total_page() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set total_page(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get request() {
             return pb_1.Message.getWrapperField(this, ListAttemptRequest, 4) as ListAttemptRequest;
         }
         set request(value: ListAttemptRequest) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_request() {
             return pb_1.Message.getField(this, 4) != null;
         }
         static fromObject(data: {
             attempts?: ReturnType<typeof Attempt.prototype.toObject>[];
             total_count?: number;
             total_page?: number;
             request?: ReturnType<typeof ListAttemptRequest.prototype.toObject>;
         }): ListAttemptResponse {
             const message = new ListAttemptResponse({});
             if (data.attempts != null) {
                 message.attempts = data.attempts.map(item => Attempt.fromObject(item));
             }
             if (data.total_count != null) {
                 message.total_count = data.total_count;
             }
             if (data.total_page != null) {
                 message.total_page = data.total_page;
             }
             if (data.request != null) {
                 message.request = ListAttemptRequest.fromObject(data.request);
             }
             return message;
         }
         toObject() {
             const data: {
                 attempts?: ReturnType<typeof Attempt.prototype.toObject>[];
                 total_count?: number;
                 total_page?: number;
                 request?: ReturnType<typeof ListAttemptRequest.prototype.toObject>;
             } = {};
             if (this.attempts != null) {
                 data.attempts = this.attempts.map((item: Attempt) => item.toObject());
             }
             if (this.total_count != null) {
                 data.total_count = this.total_count;
             }
             if (this.total_page != null) {
                 data.total_page = this.total_page;
             }
             if (this.request != null) {
                 data.request = this.request.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.attempts.length)
                 writer.writeRepeatedMessage(1, this.attempts, (item: Attempt) => item.serialize(writer));
             if (this.total_count != 0)
                 writer.writeInt32(2, this.total_count);
             if (this.total_page != 0)
                 writer.writeInt32(3, this.total_page);
             if (this.has_request)
                 writer.writeMessage(4, this.request, () => this.request.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAttemptResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAttemptResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.attempts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Attempt.deserialize(reader), Attempt));
                         break;
                     case 2:
                         message.total_count = reader.readInt32();
                         break;
                     case 3:
                         message.total_page = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.request, () => message.request = ListAttemptRequest.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListAttemptResponse {
             return ListAttemptResponse.deserialize(bytes);
         }
     }
     export class GetAttemptRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             id?: number;
         }): GetAttemptRequest {
             const message = new GetAttemptRequest({});
             if (data.id != null) {
                 message.id = data.id;
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAttemptRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAttemptRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): GetAttemptRequest {
             return GetAttemptRequest.deserialize(bytes);
         }
     }
     export class SubmitAnswerRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario_id?: number;
             answers?: SubmitAnswerRequest.SubmittedAnswer[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario_id" in data && data.scenario_id != undefined) {
                     this.scenario_id = data.scenario_id;
                 }
                 if ("answers" in data && data.answers != undefined) {
                     this.answers = data.answers;
                 }
             }
         }
         get scenario_id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set scenario_id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get answers() {
             return pb_1.Message.getRepeatedWrapperField(this, SubmitAnswerRequest.SubmittedAnswer, 2) as SubmitAnswerRequest.SubmittedAnswer[];
         }
         set answers(value: SubmitAnswerRequest.SubmittedAnswer[]) {
             pb_1.Message.setRepeatedWrapperField(this, 2, value);
         }
         static fromObject(data: {
             scenario_id?: number;
             answers?: ReturnType<typeof SubmitAnswerRequest.SubmittedAnswer.prototype.toObject>[];
         }): SubmitAnswerRequest {
             const message = new SubmitAnswerRequest({});
             if (data.scenario_id != null) {
                 message.scenario_id = data.scenario_id;
             }
             if (data.answers != null) {
                 message.answers = data.answers.map(item => SubmitAnswerRequest.SubmittedAnswer.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario_id?: number;
                 answers?: ReturnType<typeof SubmitAnswerRequest.SubmittedAnswer.prototype.toObject>[];
             } = {};
             if (this.scenario_id != null) {
                 data.scenario_id = this.scenario_id;
             }
             if (this.answers != null) {
                 data.answers = this.answers.map((item: SubmitAnswerRequest.SubmittedAnswer) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.scenario_id != 0)
                 writer.writeUint64(1, this.scenario_id);
             if (this.answers.length)
                 writer.writeRepeatedMessage(2, this.answers, (item: SubmitAnswerRequest.SubmittedAnswer) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAnswerRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAnswerRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.scenario_id = reader.readUint64();
                         break;
                     case 2:
                         reader.readMessage(message.answers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SubmitAnswerRequest.SubmittedAnswer.deserialize(reader), SubmitAnswerRequest.SubmittedAnswer));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): SubmitAnswerRequest {
             return SubmitAnswerRequest.deserialize(bytes);
         }
     }
     export namespace SubmitAnswerRequest {
         export class SubmittedAnswer extends pb_1.Message {
             #one_of_decls: number[][] = [];
             constructor(data?: any[] | {
                 question_id?: number;
                 answer?: string;
             }) {
                 super();
                 pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                 if (!Array.isArray(data) && typeof data == "object") {
                     if ("question_id" in data && data.question_id != undefined) {
                         this.question_id = data.question_id;
                     }
                     if ("answer" in data && data.answer != undefined) {
                         this.answer = data.answer;
                     }
                 }
             }
             get question_id() {
                 return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
             }
             set question_id(value: number) {
                 pb_1.Message.setField(this, 1, value);
             }
             get answer() {
                 return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
             }
             set answer(value: string) {
                 pb_1.Message.setField(this, 2, value);
             }
             static fromObject(data: {
                 question_id?: number;
                 answer?: string;
             }): SubmittedAnswer {
                 const message = new SubmittedAnswer({});
                 if (data.question_id != null) {
                     message.question_id = data.question_id;
                 }
                 if (data.answer != null) {
                     message.answer = data.answer;
                 }
                 return message;
             }
             toObject() {
                 const data: {
                     question_id?: number;
                     answer?: string;
                 } = {};
                 if (this.question_id != null) {
                     data.question_id = this.question_id;
                 }
                 if (this.answer != null) {
                     data.answer = this.answer;
                 }
                 return data;
             }
             serialize(): Uint8Array;
             serialize(w: pb_1.BinaryWriter): void;
             serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                 const writer = w || new pb_1.BinaryWriter();
                 if (this.question_id != 0)
                     writer.writeUint64(1, this.question_id);
                 if (this.answer.length)
                     writer.writeString(2, this.answer);
                 if (!w)
                     return writer.getResultBuffer();
             }
             static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmittedAnswer {
                 const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmittedAnswer();
                 while (reader.nextField()) {
                     if (reader.isEndGroup())
                         break;
                     switch (reader.getFieldNumber()) {
                         case 1:
                             message.question_id = reader.readUint64();
                             break;
                         case 2:
                             message.answer = reader.readString();
                             break;
                         default: reader.skipField();
                     }
                 }
                 return message;
             }
             serializeBinary(): Uint8Array {
                 return this.serialize();
             }
             static deserializeBinary(bytes: Uint8Array): SubmittedAnswer {
                 return SubmittedAnswer.deserialize(bytes);
             }
         }
     }
     export class SubmitAnswerResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             attempt?: Attempt;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("attempt" in data && data.attempt != undefined) {
                     this.attempt = data.attempt;
                 }
             }
         }
         get attempt() {
             return pb_1.Message.getWrapperField(this, Attempt, 1) as Attempt;
         }
         set attempt(value: Attempt) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_attempt() {
             return pb_1.Message.getField(this, 1) != null;
         }
         static fromObject(data: {
             attempt?: ReturnType<typeof Attempt.prototype.toObject>;
         }): SubmitAnswerResponse {
             const message = new SubmitAnswerResponse({});
             if (data.attempt != null) {
                 message.attempt = Attempt.fromObject(data.attempt);
             }
             return message;
         }
         toObject() {
             const data: {
                 attempt?: ReturnType<typeof Attempt.prototype.toObject>;
             } = {};
             if (this.attempt != null) {
                 data.attempt = this.attempt.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_attempt)
                 writer.writeMessage(1, this.attempt, () => this.attempt.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAnswerResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAnswerResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.attempt, () => message.attempt = Attempt.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): SubmitAnswerResponse {
             return SubmitAnswerResponse.deserialize(bytes);
         }
     }
     export class GetAttemptResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             attempt?: Attempt;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("attempt" in data && data.attempt != undefined) {
                     this.attempt = data.attempt;
                 }
             }
         }
         get attempt() {
             return pb_1.Message.getWrapperField(this, Attempt, 1) as Attempt;
         }
         set attempt(value: Attempt) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_attempt() {
             return pb_1.Message.getField(this, 1) != null;
         }
         static fromObject(data: {
             attempt?: ReturnType<typeof Attempt.prototype.toObject>;
         }): GetAttemptResponse {
             const message = new GetAttemptResponse({});
             if (data.attempt != null) {
                 message.attempt = Attempt.fromObject(data.attempt);
             }
             return message;
         }
         toObject() {
             const data: {
                 attempt?: ReturnType<typeof Attempt.prototype.toObject>;
             } = {};
             if (this.attempt != null) {
                 data.attempt = this.attempt.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_attempt)
                 writer.writeMessage(1, this.attempt, () => this.attempt.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAttemptResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAttemptResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.attempt, () => message.attempt = Attempt.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): GetAttemptResponse {
             return GetAttemptResponse.deserialize(bytes);
         }
     }
     export class CreateFieldResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             field?: Field;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("field" in data && data.field != undefined) {
                     this.field = data.field;
                 }
             }
         }
         get field() {
             return pb_1.Message.getWrapperField(this, Field, 1) as Field;
         }
         set field(value: Field) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_field() {
             return pb_1.Message.getField(this, 1) != null;
         }
         static fromObject(data: {
             field?: ReturnType<typeof Field.prototype.toObject>;
         }): CreateFieldResponse {
             const message = new CreateFieldResponse({});
             if (data.field != null) {
                 message.field = Field.fromObject(data.field);
             }
             return message;
         }
         toObject() {
             const data: {
                 field?: ReturnType<typeof Field.prototype.toObject>;
             } = {};
             if (this.field != null) {
                 data.field = this.field.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_field)
                 writer.writeMessage(1, this.field, () => this.field.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFieldResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFieldResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.field, () => message.field = Field.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): CreateFieldResponse {
             return CreateFieldResponse.deserialize(bytes);
         }
     }
     export class CreateFieldRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             name?: string;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
             }
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             name?: string;
         }): CreateFieldRequest {
             const message = new CreateFieldRequest({});
             if (data.name != null) {
                 message.name = data.name;
             }
             return message;
         }
         toObject() {
             const data: {
                 name?: string;
             } = {};
             if (this.name != null) {
                 data.name = this.name;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.name.length)
                 writer.writeString(1, this.name);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFieldRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFieldRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.name = reader.readString();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): CreateFieldRequest {
             return CreateFieldRequest.deserialize(bytes);
         }
     }
     export class UpdateFieldRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             name?: string;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         static fromObject(data: {
             id?: number;
             name?: string;
         }): UpdateFieldRequest {
             const message = new UpdateFieldRequest({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.name != null) {
                 message.name = data.name;
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 name?: string;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.name != null) {
                 data.name = this.name;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.name.length)
                 writer.writeString(2, this.name);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateFieldRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateFieldRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.name = reader.readString();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): UpdateFieldRequest {
             return UpdateFieldRequest.deserialize(bytes);
         }
     }
     export class DeleteFieldRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             ids?: number[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("ids" in data && data.ids != undefined) {
                     this.ids = data.ids;
                 }
             }
         }
         get ids() {
             return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
         }
         set ids(value: number[]) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             ids?: number[];
         }): DeleteFieldRequest {
             const message = new DeleteFieldRequest({});
             if (data.ids != null) {
                 message.ids = data.ids;
             }
             return message;
         }
         toObject() {
             const data: {
                 ids?: number[];
             } = {};
             if (this.ids != null) {
                 data.ids = this.ids;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.ids.length)
                 writer.writePackedUint64(1, this.ids);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFieldRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFieldRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.ids = reader.readPackedUint64();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): DeleteFieldRequest {
             return DeleteFieldRequest.deserialize(bytes);
         }
     }
     export class ListFieldRequest extends pb_1.Message {
         #one_of_decls: number[][] = [[5]];
         constructor(data?: any[] | ({
             ids?: number[];
             sort_methods?: SortMethod[];
             page_index?: number;
             page_size?: number;
         } & (({
             search_content?: string;
         })))) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("ids" in data && data.ids != undefined) {
                     this.ids = data.ids;
                 }
                 if ("sort_methods" in data && data.sort_methods != undefined) {
                     this.sort_methods = data.sort_methods;
                 }
                 if ("page_index" in data && data.page_index != undefined) {
                     this.page_index = data.page_index;
                 }
                 if ("page_size" in data && data.page_size != undefined) {
                     this.page_size = data.page_size;
                 }
                 if ("search_content" in data && data.search_content != undefined) {
                     this.search_content = data.search_content;
                 }
             }
         }
         get ids() {
             return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
         }
         set ids(value: number[]) {
             pb_1.Message.setField(this, 1, value);
         }
         get sort_methods() {
             return pb_1.Message.getRepeatedWrapperField(this, SortMethod, 2) as SortMethod[];
         }
         set sort_methods(value: SortMethod[]) {
             pb_1.Message.setRepeatedWrapperField(this, 2, value);
         }
         get page_index() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set page_index(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get page_size() {
             return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
         }
         set page_size(value: number) {
             pb_1.Message.setField(this, 4, value);
         }
         get search_content() {
             return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
         }
         set search_content(value: string) {
             pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
         }
         get has_search_content() {
             return pb_1.Message.getField(this, 5) != null;
         }
         get _search_content() {
             const cases: {
                 [index: number]: "none" | "search_content";
             } = {
                 0: "none",
                 5: "search_content"
             };
             return cases[pb_1.Message.computeOneofCase(this, [5])];
         }
         static fromObject(data: {
             ids?: number[];
             sort_methods?: ReturnType<typeof SortMethod.prototype.toObject>[];
             page_index?: number;
             page_size?: number;
             search_content?: string;
         }): ListFieldRequest {
             const message = new ListFieldRequest({});
             if (data.ids != null) {
                 message.ids = data.ids;
             }
             if (data.sort_methods != null) {
                 message.sort_methods = data.sort_methods.map(item => SortMethod.fromObject(item));
             }
             if (data.page_index != null) {
                 message.page_index = data.page_index;
             }
             if (data.page_size != null) {
                 message.page_size = data.page_size;
             }
             if (data.search_content != null) {
                 message.search_content = data.search_content;
             }
             return message;
         }
         toObject() {
             const data: {
                 ids?: number[];
                 sort_methods?: ReturnType<typeof SortMethod.prototype.toObject>[];
                 page_index?: number;
                 page_size?: number;
                 search_content?: string;
             } = {};
             if (this.ids != null) {
                 data.ids = this.ids;
             }
             if (this.sort_methods != null) {
                 data.sort_methods = this.sort_methods.map((item: SortMethod) => item.toObject());
             }
             if (this.page_index != null) {
                 data.page_index = this.page_index;
             }
             if (this.page_size != null) {
                 data.page_size = this.page_size;
             }
             if (this.search_content != null) {
                 data.search_content = this.search_content;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.ids.length)
                 writer.writePackedUint64(1, this.ids);
             if (this.sort_methods.length)
                 writer.writeRepeatedMessage(2, this.sort_methods, (item: SortMethod) => item.serialize(writer));
             if (this.page_index != 0)
                 writer.writeInt32(3, this.page_index);
             if (this.page_size != 0)
                 writer.writeInt32(4, this.page_size);
             if (this.has_search_content)
                 writer.writeString(5, this.search_content);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListFieldRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListFieldRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.ids = reader.readPackedUint64();
                         break;
                     case 2:
                         reader.readMessage(message.sort_methods, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortMethod.deserialize(reader), SortMethod));
                         break;
                     case 3:
                         message.page_index = reader.readInt32();
                         break;
                     case 4:
                         message.page_size = reader.readInt32();
                         break;
                     case 5:
                         message.search_content = reader.readString();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListFieldRequest {
             return ListFieldRequest.deserialize(bytes);
         }
     }
     export class ListFieldResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             fields?: Field[];
             total_count?: number;
             total_page?: number;
             request?: ListFieldRequest;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("fields" in data && data.fields != undefined) {
                     this.fields = data.fields;
                 }
                 if ("total_count" in data && data.total_count != undefined) {
                     this.total_count = data.total_count;
                 }
                 if ("total_page" in data && data.total_page != undefined) {
                     this.total_page = data.total_page;
                 }
                 if ("request" in data && data.request != undefined) {
                     this.request = data.request;
                 }
             }
         }
         get fields() {
             return pb_1.Message.getRepeatedWrapperField(this, Field, 1) as Field[];
         }
         set fields(value: Field[]) {
             pb_1.Message.setRepeatedWrapperField(this, 1, value);
         }
         get total_count() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set total_count(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get total_page() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set total_page(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get request() {
             return pb_1.Message.getWrapperField(this, ListFieldRequest, 4) as ListFieldRequest;
         }
         set request(value: ListFieldRequest) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_request() {
             return pb_1.Message.getField(this, 4) != null;
         }
         static fromObject(data: {
             fields?: ReturnType<typeof Field.prototype.toObject>[];
             total_count?: number;
             total_page?: number;
             request?: ReturnType<typeof ListFieldRequest.prototype.toObject>;
         }): ListFieldResponse {
             const message = new ListFieldResponse({});
             if (data.fields != null) {
                 message.fields = data.fields.map(item => Field.fromObject(item));
             }
             if (data.total_count != null) {
                 message.total_count = data.total_count;
             }
             if (data.total_page != null) {
                 message.total_page = data.total_page;
             }
             if (data.request != null) {
                 message.request = ListFieldRequest.fromObject(data.request);
             }
             return message;
         }
         toObject() {
             const data: {
                 fields?: ReturnType<typeof Field.prototype.toObject>[];
                 total_count?: number;
                 total_page?: number;
                 request?: ReturnType<typeof ListFieldRequest.prototype.toObject>;
             } = {};
             if (this.fields != null) {
                 data.fields = this.fields.map((item: Field) => item.toObject());
             }
             if (this.total_count != null) {
                 data.total_count = this.total_count;
             }
             if (this.total_page != null) {
                 data.total_page = this.total_page;
             }
             if (this.request != null) {
                 data.request = this.request.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.fields.length)
                 writer.writeRepeatedMessage(1, this.fields, (item: Field) => item.serialize(writer));
             if (this.total_count != 0)
                 writer.writeInt32(2, this.total_count);
             if (this.total_page != 0)
                 writer.writeInt32(3, this.total_page);
             if (this.has_request)
                 writer.writeMessage(4, this.request, () => this.request.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListFieldResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListFieldResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Field.deserialize(reader), Field));
                         break;
                     case 2:
                         message.total_count = reader.readInt32();
                         break;
                     case 3:
                         message.total_page = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.request, () => message.request = ListFieldRequest.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListFieldResponse {
             return ListFieldResponse.deserialize(bytes);
         }
     }
     export class CreateScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             name?: string;
             description?: string;
             field_ids?: number[];
             questions?: ScenarioQuestion[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
                 if ("description" in data && data.description != undefined) {
                     this.description = data.description;
                 }
                 if ("field_ids" in data && data.field_ids != undefined) {
                     this.field_ids = data.field_ids;
                 }
                 if ("questions" in data && data.questions != undefined) {
                     this.questions = data.questions;
                 }
             }
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 1, value);
         }
         get description() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set description(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get field_ids() {
             return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
         }
         set field_ids(value: number[]) {
             pb_1.Message.setField(this, 3, value);
         }
         get questions() {
             return pb_1.Message.getRepeatedWrapperField(this, ScenarioQuestion, 4) as ScenarioQuestion[];
         }
         set questions(value: ScenarioQuestion[]) {
             pb_1.Message.setRepeatedWrapperField(this, 4, value);
         }
         static fromObject(data: {
             name?: string;
             description?: string;
             field_ids?: number[];
             questions?: ReturnType<typeof ScenarioQuestion.prototype.toObject>[];
         }): CreateScenarioRequest {
             const message = new CreateScenarioRequest({});
             if (data.name != null) {
                 message.name = data.name;
             }
             if (data.description != null) {
                 message.description = data.description;
             }
             if (data.field_ids != null) {
                 message.field_ids = data.field_ids;
             }
             if (data.questions != null) {
                 message.questions = data.questions.map(item => ScenarioQuestion.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 name?: string;
                 description?: string;
                 field_ids?: number[];
                 questions?: ReturnType<typeof ScenarioQuestion.prototype.toObject>[];
             } = {};
             if (this.name != null) {
                 data.name = this.name;
             }
             if (this.description != null) {
                 data.description = this.description;
             }
             if (this.field_ids != null) {
                 data.field_ids = this.field_ids;
             }
             if (this.questions != null) {
                 data.questions = this.questions.map((item: ScenarioQuestion) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.name.length)
                 writer.writeString(1, this.name);
             if (this.description.length)
                 writer.writeString(2, this.description);
             if (this.field_ids.length)
                 writer.writePackedUint64(3, this.field_ids);
             if (this.questions.length)
                 writer.writeRepeatedMessage(4, this.questions, (item: ScenarioQuestion) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.name = reader.readString();
                         break;
                     case 2:
                         message.description = reader.readString();
                         break;
                     case 3:
                         message.field_ids = reader.readPackedUint64();
                         break;
                     case 4:
                         reader.readMessage(message.questions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ScenarioQuestion.deserialize(reader), ScenarioQuestion));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): CreateScenarioRequest {
             return CreateScenarioRequest.deserialize(bytes);
         }
     }
     export class CreateScenarioResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario?: Scenario;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario" in data && data.scenario != undefined) {
                     this.scenario = data.scenario;
                 }
             }
         }
         get scenario() {
             return pb_1.Message.getWrapperField(this, Scenario, 1) as Scenario;
         }
         set scenario(value: Scenario) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_scenario() {
             return pb_1.Message.getField(this, 1) != null;
         }
         static fromObject(data: {
             scenario?: ReturnType<typeof Scenario.prototype.toObject>;
         }): CreateScenarioResponse {
             const message = new CreateScenarioResponse({});
             if (data.scenario != null) {
                 message.scenario = Scenario.fromObject(data.scenario);
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario?: ReturnType<typeof Scenario.prototype.toObject>;
             } = {};
             if (this.scenario != null) {
                 data.scenario = this.scenario.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_scenario)
                 writer.writeMessage(1, this.scenario, () => this.scenario.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScenarioResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScenarioResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.scenario, () => message.scenario = Scenario.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): CreateScenarioResponse {
             return CreateScenarioResponse.deserialize(bytes);
         }
     }
     export class UpdateScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
             name?: string;
             description?: string;
             fields?: Field[];
             questions?: ScenarioQuestion[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
                 if ("name" in data && data.name != undefined) {
                     this.name = data.name;
                 }
                 if ("description" in data && data.description != undefined) {
                     this.description = data.description;
                 }
                 if ("fields" in data && data.fields != undefined) {
                     this.fields = data.fields;
                 }
                 if ("questions" in data && data.questions != undefined) {
                     this.questions = data.questions;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         get name() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set name(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get description() {
             return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
         }
         set description(value: string) {
             pb_1.Message.setField(this, 3, value);
         }
         get fields() {
             return pb_1.Message.getRepeatedWrapperField(this, Field, 4) as Field[];
         }
         set fields(value: Field[]) {
             pb_1.Message.setRepeatedWrapperField(this, 4, value);
         }
         get questions() {
             return pb_1.Message.getRepeatedWrapperField(this, ScenarioQuestion, 5) as ScenarioQuestion[];
         }
         set questions(value: ScenarioQuestion[]) {
             pb_1.Message.setRepeatedWrapperField(this, 5, value);
         }
         static fromObject(data: {
             id?: number;
             name?: string;
             description?: string;
             fields?: ReturnType<typeof Field.prototype.toObject>[];
             questions?: ReturnType<typeof ScenarioQuestion.prototype.toObject>[];
         }): UpdateScenarioRequest {
             const message = new UpdateScenarioRequest({});
             if (data.id != null) {
                 message.id = data.id;
             }
             if (data.name != null) {
                 message.name = data.name;
             }
             if (data.description != null) {
                 message.description = data.description;
             }
             if (data.fields != null) {
                 message.fields = data.fields.map(item => Field.fromObject(item));
             }
             if (data.questions != null) {
                 message.questions = data.questions.map(item => ScenarioQuestion.fromObject(item));
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
                 name?: string;
                 description?: string;
                 fields?: ReturnType<typeof Field.prototype.toObject>[];
                 questions?: ReturnType<typeof ScenarioQuestion.prototype.toObject>[];
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             if (this.name != null) {
                 data.name = this.name;
             }
             if (this.description != null) {
                 data.description = this.description;
             }
             if (this.fields != null) {
                 data.fields = this.fields.map((item: Field) => item.toObject());
             }
             if (this.questions != null) {
                 data.questions = this.questions.map((item: ScenarioQuestion) => item.toObject());
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (this.name.length)
                 writer.writeString(2, this.name);
             if (this.description.length)
                 writer.writeString(3, this.description);
             if (this.fields.length)
                 writer.writeRepeatedMessage(4, this.fields, (item: Field) => item.serialize(writer));
             if (this.questions.length)
                 writer.writeRepeatedMessage(5, this.questions, (item: ScenarioQuestion) => item.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     case 2:
                         message.name = reader.readString();
                         break;
                     case 3:
                         message.description = reader.readString();
                         break;
                     case 4:
                         reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Field.deserialize(reader), Field));
                         break;
                     case 5:
                         reader.readMessage(message.questions, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ScenarioQuestion.deserialize(reader), ScenarioQuestion));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): UpdateScenarioRequest {
             return UpdateScenarioRequest.deserialize(bytes);
         }
     }
     export class ScenarioQuestion extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             criteria?: string;
             hint?: string;
             content?: string;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("criteria" in data && data.criteria != undefined) {
                     this.criteria = data.criteria;
                 }
                 if ("hint" in data && data.hint != undefined) {
                     this.hint = data.hint;
                 }
                 if ("content" in data && data.content != undefined) {
                     this.content = data.content;
                 }
             }
         }
         get criteria() {
             return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
         }
         set criteria(value: string) {
             pb_1.Message.setField(this, 1, value);
         }
         get hint() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set hint(value: string) {
             pb_1.Message.setField(this, 2, value);
         }
         get content() {
             return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
         }
         set content(value: string) {
             pb_1.Message.setField(this, 3, value);
         }
         static fromObject(data: {
             criteria?: string;
             hint?: string;
             content?: string;
         }): ScenarioQuestion {
             const message = new ScenarioQuestion({});
             if (data.criteria != null) {
                 message.criteria = data.criteria;
             }
             if (data.hint != null) {
                 message.hint = data.hint;
             }
             if (data.content != null) {
                 message.content = data.content;
             }
             return message;
         }
         toObject() {
             const data: {
                 criteria?: string;
                 hint?: string;
                 content?: string;
             } = {};
             if (this.criteria != null) {
                 data.criteria = this.criteria;
             }
             if (this.hint != null) {
                 data.hint = this.hint;
             }
             if (this.content != null) {
                 data.content = this.content;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.criteria.length)
                 writer.writeString(1, this.criteria);
             if (this.hint.length)
                 writer.writeString(2, this.hint);
             if (this.content.length)
                 writer.writeString(3, this.content);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScenarioQuestion {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScenarioQuestion();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.criteria = reader.readString();
                         break;
                     case 2:
                         message.hint = reader.readString();
                         break;
                     case 3:
                         message.content = reader.readString();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ScenarioQuestion {
             return ScenarioQuestion.deserialize(bytes);
         }
     }
     export class DeleteScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             ids?: number[];
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("ids" in data && data.ids != undefined) {
                     this.ids = data.ids;
                 }
             }
         }
         get ids() {
             return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
         }
         set ids(value: number[]) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             ids?: number[];
         }): DeleteScenarioRequest {
             const message = new DeleteScenarioRequest({});
             if (data.ids != null) {
                 message.ids = data.ids;
             }
             return message;
         }
         toObject() {
             const data: {
                 ids?: number[];
             } = {};
             if (this.ids != null) {
                 data.ids = this.ids;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.ids.length)
                 writer.writePackedUint64(1, this.ids);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.ids = reader.readPackedUint64();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): DeleteScenarioRequest {
             return DeleteScenarioRequest.deserialize(bytes);
         }
     }
     export class ListScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [[2], [6], [7]];
         constructor(data?: any[] | ({
             bm_ids?: number[];
             sort_methods?: SortMethod[];
             page_index?: number;
             page_size?: number;
         } & (({
             search_content?: string;
         }) | ({
             is_favorite?: boolean;
         }) | ({
             is_finished?: boolean;
         })))) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("bm_ids" in data && data.bm_ids != undefined) {
                     this.bm_ids = data.bm_ids;
                 }
                 if ("search_content" in data && data.search_content != undefined) {
                     this.search_content = data.search_content;
                 }
                 if ("sort_methods" in data && data.sort_methods != undefined) {
                     this.sort_methods = data.sort_methods;
                 }
                 if ("page_index" in data && data.page_index != undefined) {
                     this.page_index = data.page_index;
                 }
                 if ("page_size" in data && data.page_size != undefined) {
                     this.page_size = data.page_size;
                 }
                 if ("is_favorite" in data && data.is_favorite != undefined) {
                     this.is_favorite = data.is_favorite;
                 }
                 if ("is_finished" in data && data.is_finished != undefined) {
                     this.is_finished = data.is_finished;
                 }
             }
         }
         get bm_ids() {
             return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
         }
         set bm_ids(value: number[]) {
             pb_1.Message.setField(this, 1, value);
         }
         get search_content() {
             return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
         }
         set search_content(value: string) {
             pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
         }
         get has_search_content() {
             return pb_1.Message.getField(this, 2) != null;
         }
         get sort_methods() {
             return pb_1.Message.getRepeatedWrapperField(this, SortMethod, 3) as SortMethod[];
         }
         set sort_methods(value: SortMethod[]) {
             pb_1.Message.setRepeatedWrapperField(this, 3, value);
         }
         get page_index() {
             return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
         }
         set page_index(value: number) {
             pb_1.Message.setField(this, 4, value);
         }
         get page_size() {
             return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
         }
         set page_size(value: number) {
             pb_1.Message.setField(this, 5, value);
         }
         get is_favorite() {
             return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
         }
         set is_favorite(value: boolean) {
             pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
         }
         get has_is_favorite() {
             return pb_1.Message.getField(this, 6) != null;
         }
         get is_finished() {
             return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
         }
         set is_finished(value: boolean) {
             pb_1.Message.setOneofField(this, 7, this.#one_of_decls[2], value);
         }
         get has_is_finished() {
             return pb_1.Message.getField(this, 7) != null;
         }
         get _search_content() {
             const cases: {
                 [index: number]: "none" | "search_content";
             } = {
                 0: "none",
                 2: "search_content"
             };
             return cases[pb_1.Message.computeOneofCase(this, [2])];
         }
         get _is_favorite() {
             const cases: {
                 [index: number]: "none" | "is_favorite";
             } = {
                 0: "none",
                 6: "is_favorite"
             };
             return cases[pb_1.Message.computeOneofCase(this, [6])];
         }
         get _is_finished() {
             const cases: {
                 [index: number]: "none" | "is_finished";
             } = {
                 0: "none",
                 7: "is_finished"
             };
             return cases[pb_1.Message.computeOneofCase(this, [7])];
         }
         static fromObject(data: {
             bm_ids?: number[];
             search_content?: string;
             sort_methods?: ReturnType<typeof SortMethod.prototype.toObject>[];
             page_index?: number;
             page_size?: number;
             is_favorite?: boolean;
             is_finished?: boolean;
         }): ListScenarioRequest {
             const message = new ListScenarioRequest({});
             if (data.bm_ids != null) {
                 message.bm_ids = data.bm_ids;
             }
             if (data.search_content != null) {
                 message.search_content = data.search_content;
             }
             if (data.sort_methods != null) {
                 message.sort_methods = data.sort_methods.map(item => SortMethod.fromObject(item));
             }
             if (data.page_index != null) {
                 message.page_index = data.page_index;
             }
             if (data.page_size != null) {
                 message.page_size = data.page_size;
             }
             if (data.is_favorite != null) {
                 message.is_favorite = data.is_favorite;
             }
             if (data.is_finished != null) {
                 message.is_finished = data.is_finished;
             }
             return message;
         }
         toObject() {
             const data: {
                 bm_ids?: number[];
                 search_content?: string;
                 sort_methods?: ReturnType<typeof SortMethod.prototype.toObject>[];
                 page_index?: number;
                 page_size?: number;
                 is_favorite?: boolean;
                 is_finished?: boolean;
             } = {};
             if (this.bm_ids != null) {
                 data.bm_ids = this.bm_ids;
             }
             if (this.search_content != null) {
                 data.search_content = this.search_content;
             }
             if (this.sort_methods != null) {
                 data.sort_methods = this.sort_methods.map((item: SortMethod) => item.toObject());
             }
             if (this.page_index != null) {
                 data.page_index = this.page_index;
             }
             if (this.page_size != null) {
                 data.page_size = this.page_size;
             }
             if (this.is_favorite != null) {
                 data.is_favorite = this.is_favorite;
             }
             if (this.is_finished != null) {
                 data.is_finished = this.is_finished;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.bm_ids.length)
                 writer.writePackedUint64(1, this.bm_ids);
             if (this.has_search_content)
                 writer.writeString(2, this.search_content);
             if (this.sort_methods.length)
                 writer.writeRepeatedMessage(3, this.sort_methods, (item: SortMethod) => item.serialize(writer));
             if (this.page_index != 0)
                 writer.writeInt32(4, this.page_index);
             if (this.page_size != 0)
                 writer.writeInt32(5, this.page_size);
             if (this.has_is_favorite)
                 writer.writeBool(6, this.is_favorite);
             if (this.has_is_finished)
                 writer.writeBool(7, this.is_finished);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.bm_ids = reader.readPackedUint64();
                         break;
                     case 2:
                         message.search_content = reader.readString();
                         break;
                     case 3:
                         reader.readMessage(message.sort_methods, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SortMethod.deserialize(reader), SortMethod));
                         break;
                     case 4:
                         message.page_index = reader.readInt32();
                         break;
                     case 5:
                         message.page_size = reader.readInt32();
                         break;
                     case 6:
                         message.is_favorite = reader.readBool();
                         break;
                     case 7:
                         message.is_finished = reader.readBool();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListScenarioRequest {
             return ListScenarioRequest.deserialize(bytes);
         }
     }
     export class ListScenarioResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario?: Scenario[];
             total_count?: number;
             total_page?: number;
             request?: ListScenarioRequest;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario" in data && data.scenario != undefined) {
                     this.scenario = data.scenario;
                 }
                 if ("total_count" in data && data.total_count != undefined) {
                     this.total_count = data.total_count;
                 }
                 if ("total_page" in data && data.total_page != undefined) {
                     this.total_page = data.total_page;
                 }
                 if ("request" in data && data.request != undefined) {
                     this.request = data.request;
                 }
             }
         }
         get scenario() {
             return pb_1.Message.getRepeatedWrapperField(this, Scenario, 1) as Scenario[];
         }
         set scenario(value: Scenario[]) {
             pb_1.Message.setRepeatedWrapperField(this, 1, value);
         }
         get total_count() {
             return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
         }
         set total_count(value: number) {
             pb_1.Message.setField(this, 2, value);
         }
         get total_page() {
             return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
         }
         set total_page(value: number) {
             pb_1.Message.setField(this, 3, value);
         }
         get request() {
             return pb_1.Message.getWrapperField(this, ListScenarioRequest, 4) as ListScenarioRequest;
         }
         set request(value: ListScenarioRequest) {
             pb_1.Message.setWrapperField(this, 4, value);
         }
         get has_request() {
             return pb_1.Message.getField(this, 4) != null;
         }
         static fromObject(data: {
             scenario?: ReturnType<typeof Scenario.prototype.toObject>[];
             total_count?: number;
             total_page?: number;
             request?: ReturnType<typeof ListScenarioRequest.prototype.toObject>;
         }): ListScenarioResponse {
             const message = new ListScenarioResponse({});
             if (data.scenario != null) {
                 message.scenario = data.scenario.map(item => Scenario.fromObject(item));
             }
             if (data.total_count != null) {
                 message.total_count = data.total_count;
             }
             if (data.total_page != null) {
                 message.total_page = data.total_page;
             }
             if (data.request != null) {
                 message.request = ListScenarioRequest.fromObject(data.request);
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario?: ReturnType<typeof Scenario.prototype.toObject>[];
                 total_count?: number;
                 total_page?: number;
                 request?: ReturnType<typeof ListScenarioRequest.prototype.toObject>;
             } = {};
             if (this.scenario != null) {
                 data.scenario = this.scenario.map((item: Scenario) => item.toObject());
             }
             if (this.total_count != null) {
                 data.total_count = this.total_count;
             }
             if (this.total_page != null) {
                 data.total_page = this.total_page;
             }
             if (this.request != null) {
                 data.request = this.request.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.scenario.length)
                 writer.writeRepeatedMessage(1, this.scenario, (item: Scenario) => item.serialize(writer));
             if (this.total_count != 0)
                 writer.writeInt32(2, this.total_count);
             if (this.total_page != 0)
                 writer.writeInt32(3, this.total_page);
             if (this.has_request)
                 writer.writeMessage(4, this.request, () => this.request.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListScenarioResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListScenarioResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.scenario, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Scenario.deserialize(reader), Scenario));
                         break;
                     case 2:
                         message.total_count = reader.readInt32();
                         break;
                     case 3:
                         message.total_page = reader.readInt32();
                         break;
                     case 4:
                         reader.readMessage(message.request, () => message.request = ListScenarioRequest.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): ListScenarioResponse {
             return ListScenarioResponse.deserialize(bytes);
         }
     }
     export class GetScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             id?: number;
         }): GetScenarioRequest {
             const message = new GetScenarioRequest({});
             if (data.id != null) {
                 message.id = data.id;
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): GetScenarioRequest {
             return GetScenarioRequest.deserialize(bytes);
         }
     }
     export class GetScenarioResponse extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             scenario?: Scenario;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("scenario" in data && data.scenario != undefined) {
                     this.scenario = data.scenario;
                 }
             }
         }
         get scenario() {
             return pb_1.Message.getWrapperField(this, Scenario, 1) as Scenario;
         }
         set scenario(value: Scenario) {
             pb_1.Message.setWrapperField(this, 1, value);
         }
         get has_scenario() {
             return pb_1.Message.getField(this, 1) != null;
         }
         static fromObject(data: {
             scenario?: ReturnType<typeof Scenario.prototype.toObject>;
         }): GetScenarioResponse {
             const message = new GetScenarioResponse({});
             if (data.scenario != null) {
                 message.scenario = Scenario.fromObject(data.scenario);
             }
             return message;
         }
         toObject() {
             const data: {
                 scenario?: ReturnType<typeof Scenario.prototype.toObject>;
             } = {};
             if (this.scenario != null) {
                 data.scenario = this.scenario.toObject();
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.has_scenario)
                 writer.writeMessage(1, this.scenario, () => this.scenario.serialize(writer));
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetScenarioResponse {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetScenarioResponse();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         reader.readMessage(message.scenario, () => message.scenario = Scenario.deserialize(reader));
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): GetScenarioResponse {
             return GetScenarioResponse.deserialize(bytes);
         }
     }
     export class FavoriteScenarioRequest extends pb_1.Message {
         #one_of_decls: number[][] = [];
         constructor(data?: any[] | {
             id?: number;
         }) {
             super();
             pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
             if (!Array.isArray(data) && typeof data == "object") {
                 if ("id" in data && data.id != undefined) {
                     this.id = data.id;
                 }
             }
         }
         get id() {
             return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
         }
         set id(value: number) {
             pb_1.Message.setField(this, 1, value);
         }
         static fromObject(data: {
             id?: number;
         }): FavoriteScenarioRequest {
             const message = new FavoriteScenarioRequest({});
             if (data.id != null) {
                 message.id = data.id;
             }
             return message;
         }
         toObject() {
             const data: {
                 id?: number;
             } = {};
             if (this.id != null) {
                 data.id = this.id;
             }
             return data;
         }
         serialize(): Uint8Array;
         serialize(w: pb_1.BinaryWriter): void;
         serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
             const writer = w || new pb_1.BinaryWriter();
             if (this.id != 0)
                 writer.writeUint64(1, this.id);
             if (!w)
                 return writer.getResultBuffer();
         }
         static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FavoriteScenarioRequest {
             const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FavoriteScenarioRequest();
             while (reader.nextField()) {
                 if (reader.isEndGroup())
                     break;
                 switch (reader.getFieldNumber()) {
                     case 1:
                         message.id = reader.readUint64();
                         break;
                     default: reader.skipField();
                 }
             }
             return message;
         }
         serializeBinary(): Uint8Array {
             return this.serialize();
         }
         static deserializeBinary(bytes: Uint8Array): FavoriteScenarioRequest {
             return FavoriteScenarioRequest.deserialize(bytes);
         }
     }
     export abstract class UnimplementedEkkoService {
         static definition = {
             CreateField: {
                 path: "/ekko.Ekko/CreateField",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: CreateFieldRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => CreateFieldRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: CreateFieldResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => CreateFieldResponse.deserialize(new Uint8Array(bytes))
             },
             UpdateField: {
                 path: "/ekko.Ekko/UpdateField",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: UpdateFieldRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => UpdateFieldRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
             },
             DeleteField: {
                 path: "/ekko.Ekko/DeleteField",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: DeleteFieldRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => DeleteFieldRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
             },
             CreateScenario: {
                 path: "/ekko.Ekko/CreateScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: CreateScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => CreateScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: CreateScenarioResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => CreateScenarioResponse.deserialize(new Uint8Array(bytes))
             },
             UpdateScenario: {
                 path: "/ekko.Ekko/UpdateScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: UpdateScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => UpdateScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
             },
             DeleteScenario: {
                 path: "/ekko.Ekko/DeleteScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: DeleteScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => DeleteScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
             },
             ListScenario: {
                 path: "/ekko.Ekko/ListScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: ListScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => ListScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: ListScenarioResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => ListScenarioResponse.deserialize(new Uint8Array(bytes))
             },
             FavoriteScenario: {
                 path: "/ekko.Ekko/FavoriteScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: FavoriteScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => FavoriteScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
             },
             ListAttempt: {
                 path: "/ekko.Ekko/ListAttempt",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: ListAttemptRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => ListAttemptRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: ListAttemptResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => ListAttemptResponse.deserialize(new Uint8Array(bytes))
             },
             GetAttempt: {
                 path: "/ekko.Ekko/GetAttempt",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: GetAttemptRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => GetAttemptRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: GetAttemptResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => GetAttemptResponse.deserialize(new Uint8Array(bytes))
             },
             SubmitAnswer: {
                 path: "/ekko.Ekko/SubmitAnswer",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: SubmitAnswerRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => SubmitAnswerRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: SubmitAnswerResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => SubmitAnswerResponse.deserialize(new Uint8Array(bytes))
             },
             ListAllSubmission: {
                 path: "/ekko.Ekko/ListAllSubmission",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: ListAllSubmissionRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => ListAllSubmissionRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: ListAllSubmissionResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => ListAllSubmissionResponse.deserialize(new Uint8Array(bytes))
             }
         };
         [method: string]: grpc_1.UntypedHandleCall;
         abstract CreateField(call: grpc_1.ServerUnaryCall<CreateFieldRequest, CreateFieldResponse>, callback: grpc_1.sendUnaryData<CreateFieldResponse>): void;
         abstract UpdateField(call: grpc_1.ServerUnaryCall<UpdateFieldRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
         abstract DeleteField(call: grpc_1.ServerUnaryCall<DeleteFieldRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
         abstract CreateScenario(call: grpc_1.ServerUnaryCall<CreateScenarioRequest, CreateScenarioResponse>, callback: grpc_1.sendUnaryData<CreateScenarioResponse>): void;
         abstract UpdateScenario(call: grpc_1.ServerUnaryCall<UpdateScenarioRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
         abstract DeleteScenario(call: grpc_1.ServerUnaryCall<DeleteScenarioRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
         abstract ListScenario(call: grpc_1.ServerUnaryCall<ListScenarioRequest, ListScenarioResponse>, callback: grpc_1.sendUnaryData<ListScenarioResponse>): void;
         abstract FavoriteScenario(call: grpc_1.ServerUnaryCall<FavoriteScenarioRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
         abstract ListAttempt(call: grpc_1.ServerUnaryCall<ListAttemptRequest, ListAttemptResponse>, callback: grpc_1.sendUnaryData<ListAttemptResponse>): void;
         abstract GetAttempt(call: grpc_1.ServerUnaryCall<GetAttemptRequest, GetAttemptResponse>, callback: grpc_1.sendUnaryData<GetAttemptResponse>): void;
         abstract SubmitAnswer(call: grpc_1.ServerUnaryCall<SubmitAnswerRequest, SubmitAnswerResponse>, callback: grpc_1.sendUnaryData<SubmitAnswerResponse>): void;
         abstract ListAllSubmission(call: grpc_1.ServerUnaryCall<ListAllSubmissionRequest, ListAllSubmissionResponse>, callback: grpc_1.sendUnaryData<ListAllSubmissionResponse>): void;
     }
     export class EkkoClient {
         private _address: string;
         private _client: grpc_web_1.GrpcWebClientBase;
         constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
             if (!options)
                 options = {};
             options.format = options.format || "text";
             this._address = address;
             this._client = new grpc_web_1.GrpcWebClientBase(options);
         }
         private static CreateField = new grpc_web_1.MethodDescriptor<CreateFieldRequest, CreateFieldResponse>("/ekko.Ekko/CreateField", grpc_web_1.MethodType.UNARY, CreateFieldRequest, CreateFieldResponse, (message: CreateFieldRequest) => message.serialize(), CreateFieldResponse.deserialize);
         CreateField(message: CreateFieldRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: CreateFieldResponse) => void) {
             return this._client.rpcCall<CreateFieldRequest, CreateFieldResponse>(this._address + "/ekko.Ekko/CreateField", message, metadata || {}, EkkoClient.CreateField, callback);
         }
         private static UpdateField = new grpc_web_1.MethodDescriptor<UpdateFieldRequest, dependency_2.google.protobuf.Empty>("/ekko.Ekko/UpdateField", grpc_web_1.MethodType.UNARY, UpdateFieldRequest, dependency_2.google.protobuf.Empty, (message: UpdateFieldRequest) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
         UpdateField(message: UpdateFieldRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
             return this._client.rpcCall<UpdateFieldRequest, dependency_2.google.protobuf.Empty>(this._address + "/ekko.Ekko/UpdateField", message, metadata || {}, EkkoClient.UpdateField, callback);
         }
         private static DeleteField = new grpc_web_1.MethodDescriptor<DeleteFieldRequest, dependency_2.google.protobuf.Empty>("/ekko.Ekko/DeleteField", grpc_web_1.MethodType.UNARY, DeleteFieldRequest, dependency_2.google.protobuf.Empty, (message: DeleteFieldRequest) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
         DeleteField(message: DeleteFieldRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
             return this._client.rpcCall<DeleteFieldRequest, dependency_2.google.protobuf.Empty>(this._address + "/ekko.Ekko/DeleteField", message, metadata || {}, EkkoClient.DeleteField, callback);
         }
         private static CreateScenario = new grpc_web_1.MethodDescriptor<CreateScenarioRequest, CreateScenarioResponse>("/ekko.Ekko/CreateScenario", grpc_web_1.MethodType.UNARY, CreateScenarioRequest, CreateScenarioResponse, (message: CreateScenarioRequest) => message.serialize(), CreateScenarioResponse.deserialize);
         CreateScenario(message: CreateScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: CreateScenarioResponse) => void) {
             return this._client.rpcCall<CreateScenarioRequest, CreateScenarioResponse>(this._address + "/ekko.Ekko/CreateScenario", message, metadata || {}, EkkoClient.CreateScenario, callback);
         }
         private static UpdateScenario = new grpc_web_1.MethodDescriptor<UpdateScenarioRequest, dependency_2.google.protobuf.Empty>("/ekko.Ekko/UpdateScenario", grpc_web_1.MethodType.UNARY, UpdateScenarioRequest, dependency_2.google.protobuf.Empty, (message: UpdateScenarioRequest) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
         UpdateScenario(message: UpdateScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
             return this._client.rpcCall<UpdateScenarioRequest, dependency_2.google.protobuf.Empty>(this._address + "/ekko.Ekko/UpdateScenario", message, metadata || {}, EkkoClient.UpdateScenario, callback);
         }
         private static DeleteScenario = new grpc_web_1.MethodDescriptor<DeleteScenarioRequest, dependency_2.google.protobuf.Empty>("/ekko.Ekko/DeleteScenario", grpc_web_1.MethodType.UNARY, DeleteScenarioRequest, dependency_2.google.protobuf.Empty, (message: DeleteScenarioRequest) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
         DeleteScenario(message: DeleteScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
             return this._client.rpcCall<DeleteScenarioRequest, dependency_2.google.protobuf.Empty>(this._address + "/ekko.Ekko/DeleteScenario", message, metadata || {}, EkkoClient.DeleteScenario, callback);
         }
         private static ListScenario = new grpc_web_1.MethodDescriptor<ListScenarioRequest, ListScenarioResponse>("/ekko.Ekko/ListScenario", grpc_web_1.MethodType.UNARY, ListScenarioRequest, ListScenarioResponse, (message: ListScenarioRequest) => message.serialize(), ListScenarioResponse.deserialize);
         ListScenario(message: ListScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListScenarioResponse) => void) {
             return this._client.rpcCall<ListScenarioRequest, ListScenarioResponse>(this._address + "/ekko.Ekko/ListScenario", message, metadata || {}, EkkoClient.ListScenario, callback);
         }
         private static FavoriteScenario = new grpc_web_1.MethodDescriptor<FavoriteScenarioRequest, dependency_2.google.protobuf.Empty>("/ekko.Ekko/FavoriteScenario", grpc_web_1.MethodType.UNARY, FavoriteScenarioRequest, dependency_2.google.protobuf.Empty, (message: FavoriteScenarioRequest) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
         FavoriteScenario(message: FavoriteScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
             return this._client.rpcCall<FavoriteScenarioRequest, dependency_2.google.protobuf.Empty>(this._address + "/ekko.Ekko/FavoriteScenario", message, metadata || {}, EkkoClient.FavoriteScenario, callback);
         }
         private static ListAttempt = new grpc_web_1.MethodDescriptor<ListAttemptRequest, ListAttemptResponse>("/ekko.Ekko/ListAttempt", grpc_web_1.MethodType.UNARY, ListAttemptRequest, ListAttemptResponse, (message: ListAttemptRequest) => message.serialize(), ListAttemptResponse.deserialize);
         ListAttempt(message: ListAttemptRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListAttemptResponse) => void) {
             return this._client.rpcCall<ListAttemptRequest, ListAttemptResponse>(this._address + "/ekko.Ekko/ListAttempt", message, metadata || {}, EkkoClient.ListAttempt, callback);
         }
         private static GetAttempt = new grpc_web_1.MethodDescriptor<GetAttemptRequest, GetAttemptResponse>("/ekko.Ekko/GetAttempt", grpc_web_1.MethodType.UNARY, GetAttemptRequest, GetAttemptResponse, (message: GetAttemptRequest) => message.serialize(), GetAttemptResponse.deserialize);
         GetAttempt(message: GetAttemptRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetAttemptResponse) => void) {
             return this._client.rpcCall<GetAttemptRequest, GetAttemptResponse>(this._address + "/ekko.Ekko/GetAttempt", message, metadata || {}, EkkoClient.GetAttempt, callback);
         }
         private static SubmitAnswer = new grpc_web_1.MethodDescriptor<SubmitAnswerRequest, SubmitAnswerResponse>("/ekko.Ekko/SubmitAnswer", grpc_web_1.MethodType.UNARY, SubmitAnswerRequest, SubmitAnswerResponse, (message: SubmitAnswerRequest) => message.serialize(), SubmitAnswerResponse.deserialize);
         SubmitAnswer(message: SubmitAnswerRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: SubmitAnswerResponse) => void) {
             return this._client.rpcCall<SubmitAnswerRequest, SubmitAnswerResponse>(this._address + "/ekko.Ekko/SubmitAnswer", message, metadata || {}, EkkoClient.SubmitAnswer, callback);
         }
         private static ListAllSubmission = new grpc_web_1.MethodDescriptor<ListAllSubmissionRequest, ListAllSubmissionResponse>("/ekko.Ekko/ListAllSubmission", grpc_web_1.MethodType.UNARY, ListAllSubmissionRequest, ListAllSubmissionResponse, (message: ListAllSubmissionRequest) => message.serialize(), ListAllSubmissionResponse.deserialize);
         ListAllSubmission(message: ListAllSubmissionRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListAllSubmissionResponse) => void) {
             return this._client.rpcCall<ListAllSubmissionRequest, ListAllSubmissionResponse>(this._address + "/ekko.Ekko/ListAllSubmission", message, metadata || {}, EkkoClient.ListAllSubmission, callback);
         }
     }
     export abstract class UnimplementedChronobreakService {
         static definition = {
             ListField: {
                 path: "/ekko.Chronobreak/ListField",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: ListFieldRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => ListFieldRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: ListFieldResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => ListFieldResponse.deserialize(new Uint8Array(bytes))
             },
             ListScenario: {
                 path: "/ekko.Chronobreak/ListScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: ListScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => ListScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: ListScenarioResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => ListScenarioResponse.deserialize(new Uint8Array(bytes))
             },
             GetScenario: {
                 path: "/ekko.Chronobreak/GetScenario",
                 requestStream: false,
                 responseStream: false,
                 requestSerialize: (message: GetScenarioRequest) => Buffer.from(message.serialize()),
                 requestDeserialize: (bytes: Buffer) => GetScenarioRequest.deserialize(new Uint8Array(bytes)),
                 responseSerialize: (message: GetScenarioResponse) => Buffer.from(message.serialize()),
                 responseDeserialize: (bytes: Buffer) => GetScenarioResponse.deserialize(new Uint8Array(bytes))
             }
         };
         [method: string]: grpc_1.UntypedHandleCall;
         abstract ListField(call: grpc_1.ServerUnaryCall<ListFieldRequest, ListFieldResponse>, callback: grpc_1.sendUnaryData<ListFieldResponse>): void;
         abstract ListScenario(call: grpc_1.ServerUnaryCall<ListScenarioRequest, ListScenarioResponse>, callback: grpc_1.sendUnaryData<ListScenarioResponse>): void;
         abstract GetScenario(call: grpc_1.ServerUnaryCall<GetScenarioRequest, GetScenarioResponse>, callback: grpc_1.sendUnaryData<GetScenarioResponse>): void;
     }
     export class ChronobreakClient {
         private _address: string;
         private _client: grpc_web_1.GrpcWebClientBase;
         constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
             if (!options)
                 options = {};
             options.format = options.format || "text";
             this._address = address;
             this._client = new grpc_web_1.GrpcWebClientBase(options);
         }
         private static ListField = new grpc_web_1.MethodDescriptor<ListFieldRequest, ListFieldResponse>("/ekko.Chronobreak/ListField", grpc_web_1.MethodType.UNARY, ListFieldRequest, ListFieldResponse, (message: ListFieldRequest) => message.serialize(), ListFieldResponse.deserialize);
         ListField(message: ListFieldRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListFieldResponse) => void) {
             return this._client.rpcCall<ListFieldRequest, ListFieldResponse>(this._address + "/ekko.Chronobreak/ListField", message, metadata || {}, ChronobreakClient.ListField, callback);
         }
         private static ListScenario = new grpc_web_1.MethodDescriptor<ListScenarioRequest, ListScenarioResponse>("/ekko.Chronobreak/ListScenario", grpc_web_1.MethodType.UNARY, ListScenarioRequest, ListScenarioResponse, (message: ListScenarioRequest) => message.serialize(), ListScenarioResponse.deserialize);
         ListScenario(message: ListScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListScenarioResponse) => void) {
             return this._client.rpcCall<ListScenarioRequest, ListScenarioResponse>(this._address + "/ekko.Chronobreak/ListScenario", message, metadata || {}, ChronobreakClient.ListScenario, callback);
         }
         private static GetScenario = new grpc_web_1.MethodDescriptor<GetScenarioRequest, GetScenarioResponse>("/ekko.Chronobreak/GetScenario", grpc_web_1.MethodType.UNARY, GetScenarioRequest, GetScenarioResponse, (message: GetScenarioRequest) => message.serialize(), GetScenarioResponse.deserialize);
         GetScenario(message: GetScenarioRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetScenarioResponse) => void) {
             return this._client.rpcCall<GetScenarioRequest, GetScenarioResponse>(this._address + "/ekko.Chronobreak/GetScenario", message, metadata || {}, ChronobreakClient.GetScenario, callback);
         }
     }
 }