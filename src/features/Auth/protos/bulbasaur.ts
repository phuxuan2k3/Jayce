/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: api/bulbasaur.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace bulbasaur {
    export enum TokenType {
        TOKEN_TYPE_UNKNOWN = 0,
        TOKEN_TYPE_ACCESS_TOKEN = 1,
        TOKEN_TYPE_REFRESH_TOKEN = 2
    }
    export enum Role {
        ROLE_UNKNOWN = 0,
        ROLE_CANDIDATE = 1,
        ROLE_BUSINESS_MANAGER = 2
    }
    export class TokenInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            safe_id?: string;
            refresh_token?: string;
            access_token?: string;
            role?: Role;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("safe_id" in data && data.safe_id != undefined) {
                    this.safe_id = data.safe_id;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get safe_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set safe_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, Role.ROLE_UNKNOWN) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            safe_id?: string;
            refresh_token?: string;
            access_token?: string;
            role?: Role;
        }): TokenInfo {
            const message = new TokenInfo({});
            if (data.safe_id != null) {
                message.safe_id = data.safe_id;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                safe_id?: string;
                refresh_token?: string;
                access_token?: string;
                role?: Role;
            } = {};
            if (this.safe_id != null) {
                data.safe_id = this.safe_id;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.safe_id.length)
                writer.writeString(1, this.safe_id);
            if (this.refresh_token.length)
                writer.writeString(2, this.refresh_token);
            if (this.access_token.length)
                writer.writeString(3, this.access_token);
            if (this.role != Role.ROLE_UNKNOWN)
                writer.writeEnum(4, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.safe_id = reader.readString();
                        break;
                    case 2:
                        message.refresh_token = reader.readString();
                        break;
                    case 3:
                        message.access_token = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenInfo {
            return TokenInfo.deserialize(bytes);
        }
    }
    export class SignUpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3], [4]];
        constructor(data?: any[] | ({
            role?: Role;
        } & (({
            local?: SignUpRequest.Local;
            google?: never;
        } | {
            local?: never;
            google?: SignUpRequest.Google;
        }) | ({
            device_id?: string;
        }) | ({
            device_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get local() {
            return pb_1.Message.getWrapperField(this, SignUpRequest.Local, 1) as SignUpRequest.Local;
        }
        set local(value: SignUpRequest.Local) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, SignUpRequest.Google, 2) as SignUpRequest.Google;
        }
        set google(value: SignUpRequest.Google) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_google() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_device_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 5, Role.ROLE_UNKNOWN) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 5, value);
        }
        get credential() {
            const cases: {
                [index: number]: "none" | "local" | "google";
            } = {
                0: "none",
                1: "local",
                2: "google"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get _device_id() {
            const cases: {
                [index: number]: "none" | "device_id";
            } = {
                0: "none",
                3: "device_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _device_name() {
            const cases: {
                [index: number]: "none" | "device_name";
            } = {
                0: "none",
                4: "device_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            local?: ReturnType<typeof SignUpRequest.Local.prototype.toObject>;
            google?: ReturnType<typeof SignUpRequest.Google.prototype.toObject>;
            device_id?: string;
            device_name?: string;
            role?: Role;
        }): SignUpRequest {
            const message = new SignUpRequest({});
            if (data.local != null) {
                message.local = SignUpRequest.Local.fromObject(data.local);
            }
            if (data.google != null) {
                message.google = SignUpRequest.Google.fromObject(data.google);
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                local?: ReturnType<typeof SignUpRequest.Local.prototype.toObject>;
                google?: ReturnType<typeof SignUpRequest.Google.prototype.toObject>;
                device_id?: string;
                device_name?: string;
                role?: Role;
            } = {};
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_local)
                writer.writeMessage(1, this.local, () => this.local.serialize(writer));
            if (this.has_google)
                writer.writeMessage(2, this.google, () => this.google.serialize(writer));
            if (this.has_device_id)
                writer.writeString(3, this.device_id);
            if (this.has_device_name)
                writer.writeString(4, this.device_name);
            if (this.role != Role.ROLE_UNKNOWN)
                writer.writeEnum(5, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.local, () => message.local = SignUpRequest.Local.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.google, () => message.google = SignUpRequest.Google.deserialize(reader));
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_name = reader.readString();
                        break;
                    case 5:
                        message.role = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpRequest {
            return SignUpRequest.deserialize(bytes);
        }
    }
    export namespace SignUpRequest {
        export class Local extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                username?: string;
                password?: string;
                confirm_password?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("username" in data && data.username != undefined) {
                        this.username = data.username;
                    }
                    if ("password" in data && data.password != undefined) {
                        this.password = data.password;
                    }
                    if ("confirm_password" in data && data.confirm_password != undefined) {
                        this.confirm_password = data.confirm_password;
                    }
                }
            }
            get username() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set username(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get password() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set password(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get confirm_password() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set confirm_password(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                username?: string;
                password?: string;
                confirm_password?: string;
            }): Local {
                const message = new Local({});
                if (data.username != null) {
                    message.username = data.username;
                }
                if (data.password != null) {
                    message.password = data.password;
                }
                if (data.confirm_password != null) {
                    message.confirm_password = data.confirm_password;
                }
                return message;
            }
            toObject() {
                const data: {
                    username?: string;
                    password?: string;
                    confirm_password?: string;
                } = {};
                if (this.username != null) {
                    data.username = this.username;
                }
                if (this.password != null) {
                    data.password = this.password;
                }
                if (this.confirm_password != null) {
                    data.confirm_password = this.confirm_password;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.username.length)
                    writer.writeString(1, this.username);
                if (this.password.length)
                    writer.writeString(2, this.password);
                if (this.confirm_password.length)
                    writer.writeString(3, this.confirm_password);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Local {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Local();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.username = reader.readString();
                            break;
                        case 2:
                            message.password = reader.readString();
                            break;
                        case 3:
                            message.confirm_password = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Local {
                return Local.deserialize(bytes);
            }
        }
        export class Google extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                credential?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credential" in data && data.credential != undefined) {
                        this.credential = data.credential;
                    }
                }
            }
            get credential() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set credential(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                credential?: string;
            }): Google {
                const message = new Google({});
                if (data.credential != null) {
                    message.credential = data.credential;
                }
                return message;
            }
            toObject() {
                const data: {
                    credential?: string;
                } = {};
                if (this.credential != null) {
                    data.credential = this.credential;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credential.length)
                    writer.writeString(1, this.credential);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Google {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Google();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credential = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Google {
                return Google.deserialize(bytes);
            }
        }
    }
    export class SignUpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): SignUpResponse {
            const message = new SignUpResponse({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpResponse {
            return SignUpResponse.deserialize(bytes);
        }
    }
    export class SignInRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            local?: SignInRequest.Local;
            google?: never;
        } | {
            local?: never;
            google?: SignInRequest.Google;
        }) | ({
            device_id?: string;
        }) | ({
            device_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get local() {
            return pb_1.Message.getWrapperField(this, SignInRequest.Local, 1) as SignInRequest.Local;
        }
        set local(value: SignInRequest.Local) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, SignInRequest.Google, 2) as SignInRequest.Google;
        }
        set google(value: SignInRequest.Google) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_google() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_device_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get credential() {
            const cases: {
                [index: number]: "none" | "local" | "google";
            } = {
                0: "none",
                1: "local",
                2: "google"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get _device_id() {
            const cases: {
                [index: number]: "none" | "device_id";
            } = {
                0: "none",
                3: "device_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _device_name() {
            const cases: {
                [index: number]: "none" | "device_name";
            } = {
                0: "none",
                4: "device_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            local?: ReturnType<typeof SignInRequest.Local.prototype.toObject>;
            google?: ReturnType<typeof SignInRequest.Google.prototype.toObject>;
            device_id?: string;
            device_name?: string;
        }): SignInRequest {
            const message = new SignInRequest({});
            if (data.local != null) {
                message.local = SignInRequest.Local.fromObject(data.local);
            }
            if (data.google != null) {
                message.google = SignInRequest.Google.fromObject(data.google);
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                local?: ReturnType<typeof SignInRequest.Local.prototype.toObject>;
                google?: ReturnType<typeof SignInRequest.Google.prototype.toObject>;
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_local)
                writer.writeMessage(1, this.local, () => this.local.serialize(writer));
            if (this.has_google)
                writer.writeMessage(2, this.google, () => this.google.serialize(writer));
            if (this.has_device_id)
                writer.writeString(3, this.device_id);
            if (this.has_device_name)
                writer.writeString(4, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.local, () => message.local = SignInRequest.Local.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.google, () => message.google = SignInRequest.Google.deserialize(reader));
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInRequest {
            return SignInRequest.deserialize(bytes);
        }
    }
    export namespace SignInRequest {
        export class Local extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                username?: string;
                password?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("username" in data && data.username != undefined) {
                        this.username = data.username;
                    }
                    if ("password" in data && data.password != undefined) {
                        this.password = data.password;
                    }
                }
            }
            get username() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set username(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get password() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set password(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                username?: string;
                password?: string;
            }): Local {
                const message = new Local({});
                if (data.username != null) {
                    message.username = data.username;
                }
                if (data.password != null) {
                    message.password = data.password;
                }
                return message;
            }
            toObject() {
                const data: {
                    username?: string;
                    password?: string;
                } = {};
                if (this.username != null) {
                    data.username = this.username;
                }
                if (this.password != null) {
                    data.password = this.password;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.username.length)
                    writer.writeString(1, this.username);
                if (this.password.length)
                    writer.writeString(2, this.password);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Local {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Local();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.username = reader.readString();
                            break;
                        case 2:
                            message.password = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Local {
                return Local.deserialize(bytes);
            }
        }
        export class Google extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                credential?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credential" in data && data.credential != undefined) {
                        this.credential = data.credential;
                    }
                }
            }
            get credential() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set credential(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                credential?: string;
            }): Google {
                const message = new Google({});
                if (data.credential != null) {
                    message.credential = data.credential;
                }
                return message;
            }
            toObject() {
                const data: {
                    credential?: string;
                } = {};
                if (this.credential != null) {
                    data.credential = this.credential;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credential.length)
                    writer.writeString(1, this.credential);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Google {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Google();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credential = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Google {
                return Google.deserialize(bytes);
            }
        }
    }
    export class SignInResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): SignInResponse {
            const message = new SignInResponse({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInResponse {
            return SignInResponse.deserialize(bytes);
        }
    }
    export class RefreshTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): RefreshTokenRequest {
            const message = new RefreshTokenRequest({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenRequest {
            return RefreshTokenRequest.deserialize(bytes);
        }
    }
    export class RefreshTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): RefreshTokenResponse {
            const message = new RefreshTokenResponse({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenResponse {
            return RefreshTokenResponse.deserialize(bytes);
        }
    }
    export class UpdateMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            metadata?: string;
        }): UpdateMetadataRequest {
            const message = new UpdateMetadataRequest({});
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: string;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metadata.length)
                writer.writeString(1, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateMetadataRequest {
            return UpdateMetadataRequest.deserialize(bytes);
        }
    }
    export abstract class UnimplementedBulbasaurService {
        static definition = {
            SignUp: {
                path: "/bulbasaur.Bulbasaur/SignUp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
            },
            SignIn: {
                path: "/bulbasaur.Bulbasaur/SignIn",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateMetadata: {
                path: "/bulbasaur.Bulbasaur/UpdateMetadata",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            RefreshToken: {
                path: "/bulbasaur.Bulbasaur/RefreshToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RefreshTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RefreshTokenResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.sendUnaryData<SignUpResponse>): void;
        abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.sendUnaryData<SignInResponse>): void;
        abstract UpdateMetadata(call: grpc_1.ServerUnaryCall<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract RefreshToken(call: grpc_1.ServerUnaryCall<RefreshTokenRequest, RefreshTokenResponse>, callback: grpc_1.sendUnaryData<RefreshTokenResponse>): void;
    }
    export class BulbasaurClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static SignUp = new grpc_web_1.MethodDescriptor<SignUpRequest, SignUpResponse>("/bulbasaur.Bulbasaur/SignUp", grpc_web_1.MethodType.UNARY, SignUpRequest, SignUpResponse, (message: SignUpRequest) => message.serialize(), SignUpResponse.deserialize);
        SignUp(message: SignUpRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: SignUpResponse) => void) {
            return this._client.rpcCall<SignUpRequest, SignUpResponse>(this._address + "/bulbasaur.Bulbasaur/SignUp", message, metadata || {}, BulbasaurClient.SignUp, callback);
        }
        private static SignIn = new grpc_web_1.MethodDescriptor<SignInRequest, SignInResponse>("/bulbasaur.Bulbasaur/SignIn", grpc_web_1.MethodType.UNARY, SignInRequest, SignInResponse, (message: SignInRequest) => message.serialize(), SignInResponse.deserialize);
        SignIn(message: SignInRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: SignInResponse) => void) {
            return this._client.rpcCall<SignInRequest, SignInResponse>(this._address + "/bulbasaur.Bulbasaur/SignIn", message, metadata || {}, BulbasaurClient.SignIn, callback);
        }
        private static UpdateMetadata = new grpc_web_1.MethodDescriptor<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Bulbasaur/UpdateMetadata", grpc_web_1.MethodType.UNARY, UpdateMetadataRequest, dependency_1.google.protobuf.Empty, (message: UpdateMetadataRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        UpdateMetadata(message: UpdateMetadataRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Bulbasaur/UpdateMetadata", message, metadata || {}, BulbasaurClient.UpdateMetadata, callback);
        }
        private static RefreshToken = new grpc_web_1.MethodDescriptor<RefreshTokenRequest, RefreshTokenResponse>("/bulbasaur.Bulbasaur/RefreshToken", grpc_web_1.MethodType.UNARY, RefreshTokenRequest, RefreshTokenResponse, (message: RefreshTokenRequest) => message.serialize(), RefreshTokenResponse.deserialize);
        RefreshToken(message: RefreshTokenRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: RefreshTokenResponse) => void) {
            return this._client.rpcCall<RefreshTokenRequest, RefreshTokenResponse>(this._address + "/bulbasaur.Bulbasaur/RefreshToken", message, metadata || {}, BulbasaurClient.RefreshToken, callback);
        }
    }
}
