/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.0
 * source: bulbasaur.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "../google/protobuf/empty";
import * as dependency_2 from "./annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace bulbasaur {
    export enum TokenType {
        TOKEN_TYPE_UNKNOWN = 0,
        TOKEN_TYPE_ACCESS_TOKEN = 1,
        TOKEN_TYPE_REFRESH_TOKEN = 2
    }
    export enum Role {
        ROLE_UNKNOWN = 0,
        ROLE_CANDIDATE = 1,
        ROLE_BUSINESS_MANAGER = 2
    }
    export class TokenInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            safe_id?: string;
            refresh_token?: string;
            access_token?: string;
            role?: Role;
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("safe_id" in data && data.safe_id != undefined) {
                    this.safe_id = data.safe_id;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get safe_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set safe_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, Role.ROLE_UNKNOWN) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 4, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            safe_id?: string;
            refresh_token?: string;
            access_token?: string;
            role?: Role;
            user_id?: number;
        }): TokenInfo {
            const message = new TokenInfo({});
            if (data.safe_id != null) {
                message.safe_id = data.safe_id;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                safe_id?: string;
                refresh_token?: string;
                access_token?: string;
                role?: Role;
                user_id?: number;
            } = {};
            if (this.safe_id != null) {
                data.safe_id = this.safe_id;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.safe_id.length)
                writer.writeString(1, this.safe_id);
            if (this.refresh_token.length)
                writer.writeString(2, this.refresh_token);
            if (this.access_token.length)
                writer.writeString(3, this.access_token);
            if (this.role != Role.ROLE_UNKNOWN)
                writer.writeEnum(4, this.role);
            if (this.user_id != 0)
                writer.writeUint64(5, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.safe_id = reader.readString();
                        break;
                    case 2:
                        message.refresh_token = reader.readString();
                        break;
                    case 3:
                        message.access_token = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readEnum();
                        break;
                    case 5:
                        message.user_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenInfo {
            return TokenInfo.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            username?: string;
            email?: string;
            role?: Role;
            id?: number;
        } & (({
            metadata?: metadata;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, Role.ROLE_UNKNOWN) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, metadata, 5) as metadata;
        }
        set metadata(value: metadata) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _metadata() {
            const cases: {
                [index: number]: "none" | "metadata";
            } = {
                0: "none",
                5: "metadata"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            username?: string;
            email?: string;
            role?: Role;
            id?: number;
            metadata?: ReturnType<typeof metadata.prototype.toObject>;
        }): User {
            const message = new User({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.metadata != null) {
                message.metadata = metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                email?: string;
                role?: Role;
                id?: number;
                metadata?: ReturnType<typeof metadata.prototype.toObject>;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.role != Role.ROLE_UNKNOWN)
                writer.writeEnum(3, this.role);
            if (this.id != 0)
                writer.writeUint64(4, this.id);
            if (this.has_metadata)
                writer.writeMessage(5, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.role = reader.readEnum();
                        break;
                    case 4:
                        message.id = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.metadata, () => message.metadata = metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class MeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): MeResponse {
            const message = new MeResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MeResponse {
            return MeResponse.deserialize(bytes);
        }
    }
    export class ListUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ids" in data && data.user_ids != undefined) {
                    this.user_ids = data.user_ids;
                }
            }
        }
        get user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set user_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ids?: number[];
        }): ListUsersRequest {
            const message = new ListUsersRequest({});
            if (data.user_ids != null) {
                message.user_ids = data.user_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ids?: number[];
            } = {};
            if (this.user_ids != null) {
                data.user_ids = this.user_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ids.length)
                writer.writePackedUint64(1, this.user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersRequest {
            return ListUsersRequest.deserialize(bytes);
        }
    }
    export class ListUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): ListUsersResponse {
            const message = new ListUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersResponse {
            return ListUsersResponse.deserialize(bytes);
        }
    }
    export class SignUpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3], [4]];
        constructor(data?: any[] | ({
            role?: Role;
            metadata?: metadata;
        } & (({
            local?: SignUpRequest.Local;
            google?: never;
        } | {
            local?: never;
            google?: SignUpRequest.Google;
        }) | ({
            device_id?: string;
        }) | ({
            device_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get local() {
            return pb_1.Message.getWrapperField(this, SignUpRequest.Local, 1) as SignUpRequest.Local;
        }
        set local(value: SignUpRequest.Local) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, SignUpRequest.Google, 2) as SignUpRequest.Google;
        }
        set google(value: SignUpRequest.Google) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_google() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_device_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 5, Role.ROLE_UNKNOWN) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 5, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, metadata, 6) as metadata;
        }
        set metadata(value: metadata) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get credential() {
            const cases: {
                [index: number]: "none" | "local" | "google";
            } = {
                0: "none",
                1: "local",
                2: "google"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get _device_id() {
            const cases: {
                [index: number]: "none" | "device_id";
            } = {
                0: "none",
                3: "device_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _device_name() {
            const cases: {
                [index: number]: "none" | "device_name";
            } = {
                0: "none",
                4: "device_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            local?: ReturnType<typeof SignUpRequest.Local.prototype.toObject>;
            google?: ReturnType<typeof SignUpRequest.Google.prototype.toObject>;
            device_id?: string;
            device_name?: string;
            role?: Role;
            metadata?: ReturnType<typeof metadata.prototype.toObject>;
        }): SignUpRequest {
            const message = new SignUpRequest({});
            if (data.local != null) {
                message.local = SignUpRequest.Local.fromObject(data.local);
            }
            if (data.google != null) {
                message.google = SignUpRequest.Google.fromObject(data.google);
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.metadata != null) {
                message.metadata = metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                local?: ReturnType<typeof SignUpRequest.Local.prototype.toObject>;
                google?: ReturnType<typeof SignUpRequest.Google.prototype.toObject>;
                device_id?: string;
                device_name?: string;
                role?: Role;
                metadata?: ReturnType<typeof metadata.prototype.toObject>;
            } = {};
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_local)
                writer.writeMessage(1, this.local, () => this.local.serialize(writer));
            if (this.has_google)
                writer.writeMessage(2, this.google, () => this.google.serialize(writer));
            if (this.has_device_id)
                writer.writeString(3, this.device_id);
            if (this.has_device_name)
                writer.writeString(4, this.device_name);
            if (this.role != Role.ROLE_UNKNOWN)
                writer.writeEnum(5, this.role);
            if (this.has_metadata)
                writer.writeMessage(6, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.local, () => message.local = SignUpRequest.Local.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.google, () => message.google = SignUpRequest.Google.deserialize(reader));
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_name = reader.readString();
                        break;
                    case 5:
                        message.role = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.metadata, () => message.metadata = metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpRequest {
            return SignUpRequest.deserialize(bytes);
        }
    }
    export namespace SignUpRequest {
        export class Local extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                username?: string;
                password?: string;
                confirm_password?: string;
                email?: string;
                otp?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("username" in data && data.username != undefined) {
                        this.username = data.username;
                    }
                    if ("password" in data && data.password != undefined) {
                        this.password = data.password;
                    }
                    if ("confirm_password" in data && data.confirm_password != undefined) {
                        this.confirm_password = data.confirm_password;
                    }
                    if ("email" in data && data.email != undefined) {
                        this.email = data.email;
                    }
                    if ("otp" in data && data.otp != undefined) {
                        this.otp = data.otp;
                    }
                }
            }
            get username() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set username(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get password() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set password(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get confirm_password() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set confirm_password(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get email() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set email(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get otp() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set otp(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data: {
                username?: string;
                password?: string;
                confirm_password?: string;
                email?: string;
                otp?: string;
            }): Local {
                const message = new Local({});
                if (data.username != null) {
                    message.username = data.username;
                }
                if (data.password != null) {
                    message.password = data.password;
                }
                if (data.confirm_password != null) {
                    message.confirm_password = data.confirm_password;
                }
                if (data.email != null) {
                    message.email = data.email;
                }
                if (data.otp != null) {
                    message.otp = data.otp;
                }
                return message;
            }
            toObject() {
                const data: {
                    username?: string;
                    password?: string;
                    confirm_password?: string;
                    email?: string;
                    otp?: string;
                } = {};
                if (this.username != null) {
                    data.username = this.username;
                }
                if (this.password != null) {
                    data.password = this.password;
                }
                if (this.confirm_password != null) {
                    data.confirm_password = this.confirm_password;
                }
                if (this.email != null) {
                    data.email = this.email;
                }
                if (this.otp != null) {
                    data.otp = this.otp;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.username.length)
                    writer.writeString(1, this.username);
                if (this.password.length)
                    writer.writeString(2, this.password);
                if (this.confirm_password.length)
                    writer.writeString(3, this.confirm_password);
                if (this.email.length)
                    writer.writeString(4, this.email);
                if (this.otp.length)
                    writer.writeString(9, this.otp);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Local {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Local();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.username = reader.readString();
                            break;
                        case 2:
                            message.password = reader.readString();
                            break;
                        case 3:
                            message.confirm_password = reader.readString();
                            break;
                        case 4:
                            message.email = reader.readString();
                            break;
                        case 9:
                            message.otp = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Local {
                return Local.deserialize(bytes);
            }
        }
        export class Google extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                credential?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credential" in data && data.credential != undefined) {
                        this.credential = data.credential;
                    }
                }
            }
            get credential() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set credential(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                credential?: string;
            }): Google {
                const message = new Google({});
                if (data.credential != null) {
                    message.credential = data.credential;
                }
                return message;
            }
            toObject() {
                const data: {
                    credential?: string;
                } = {};
                if (this.credential != null) {
                    data.credential = this.credential;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credential.length)
                    writer.writeString(1, this.credential);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Google {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Google();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credential = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Google {
                return Google.deserialize(bytes);
            }
        }
    }
    export class SignUpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 2) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): SignUpResponse {
            const message = new SignUpResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_token_info)
                writer.writeMessage(2, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpResponse {
            return SignUpResponse.deserialize(bytes);
        }
    }
    export class SignInRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            local?: SignInRequest.Local;
            google?: never;
        } | {
            local?: never;
            google?: SignInRequest.Google;
        }) | ({
            device_id?: string;
        }) | ({
            device_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get local() {
            return pb_1.Message.getWrapperField(this, SignInRequest.Local, 1) as SignInRequest.Local;
        }
        set local(value: SignInRequest.Local) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, SignInRequest.Google, 2) as SignInRequest.Google;
        }
        set google(value: SignInRequest.Google) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_google() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_device_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get credential() {
            const cases: {
                [index: number]: "none" | "local" | "google";
            } = {
                0: "none",
                1: "local",
                2: "google"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get _device_id() {
            const cases: {
                [index: number]: "none" | "device_id";
            } = {
                0: "none",
                3: "device_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _device_name() {
            const cases: {
                [index: number]: "none" | "device_name";
            } = {
                0: "none",
                4: "device_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            local?: ReturnType<typeof SignInRequest.Local.prototype.toObject>;
            google?: ReturnType<typeof SignInRequest.Google.prototype.toObject>;
            device_id?: string;
            device_name?: string;
        }): SignInRequest {
            const message = new SignInRequest({});
            if (data.local != null) {
                message.local = SignInRequest.Local.fromObject(data.local);
            }
            if (data.google != null) {
                message.google = SignInRequest.Google.fromObject(data.google);
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                local?: ReturnType<typeof SignInRequest.Local.prototype.toObject>;
                google?: ReturnType<typeof SignInRequest.Google.prototype.toObject>;
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_local)
                writer.writeMessage(1, this.local, () => this.local.serialize(writer));
            if (this.has_google)
                writer.writeMessage(2, this.google, () => this.google.serialize(writer));
            if (this.has_device_id)
                writer.writeString(3, this.device_id);
            if (this.has_device_name)
                writer.writeString(4, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.local, () => message.local = SignInRequest.Local.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.google, () => message.google = SignInRequest.Google.deserialize(reader));
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInRequest {
            return SignInRequest.deserialize(bytes);
        }
    }
    export namespace SignInRequest {
        export class Local extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                username?: string;
                password?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("username" in data && data.username != undefined) {
                        this.username = data.username;
                    }
                    if ("password" in data && data.password != undefined) {
                        this.password = data.password;
                    }
                }
            }
            get username() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set username(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get password() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set password(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                username?: string;
                password?: string;
            }): Local {
                const message = new Local({});
                if (data.username != null) {
                    message.username = data.username;
                }
                if (data.password != null) {
                    message.password = data.password;
                }
                return message;
            }
            toObject() {
                const data: {
                    username?: string;
                    password?: string;
                } = {};
                if (this.username != null) {
                    data.username = this.username;
                }
                if (this.password != null) {
                    data.password = this.password;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.username.length)
                    writer.writeString(1, this.username);
                if (this.password.length)
                    writer.writeString(2, this.password);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Local {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Local();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.username = reader.readString();
                            break;
                        case 2:
                            message.password = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Local {
                return Local.deserialize(bytes);
            }
        }
        export class Google extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                credential?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credential" in data && data.credential != undefined) {
                        this.credential = data.credential;
                    }
                }
            }
            get credential() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set credential(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                credential?: string;
            }): Google {
                const message = new Google({});
                if (data.credential != null) {
                    message.credential = data.credential;
                }
                return message;
            }
            toObject() {
                const data: {
                    credential?: string;
                } = {};
                if (this.credential != null) {
                    data.credential = this.credential;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credential.length)
                    writer.writeString(1, this.credential);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Google {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Google();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credential = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Google {
                return Google.deserialize(bytes);
            }
        }
    }
    export class SignInResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 2) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): SignInResponse {
            const message = new SignInResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_token_info)
                writer.writeMessage(2, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInResponse {
            return SignInResponse.deserialize(bytes);
        }
    }
    export class RefreshTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): RefreshTokenRequest {
            const message = new RefreshTokenRequest({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenRequest {
            return RefreshTokenRequest.deserialize(bytes);
        }
    }
    export class RefreshTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_info?: TokenInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_info" in data && data.token_info != undefined) {
                    this.token_info = data.token_info;
                }
            }
        }
        get token_info() {
            return pb_1.Message.getWrapperField(this, TokenInfo, 1) as TokenInfo;
        }
        set token_info(value: TokenInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
        }): RefreshTokenResponse {
            const message = new RefreshTokenResponse({});
            if (data.token_info != null) {
                message.token_info = TokenInfo.fromObject(data.token_info);
            }
            return message;
        }
        toObject() {
            const data: {
                token_info?: ReturnType<typeof TokenInfo.prototype.toObject>;
            } = {};
            if (this.token_info != null) {
                data.token_info = this.token_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_info)
                writer.writeMessage(1, this.token_info, () => this.token_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_info, () => message.token_info = TokenInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenResponse {
            return RefreshTokenResponse.deserialize(bytes);
        }
    }
    export class UpdateMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: metadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, metadata, 1) as metadata;
        }
        set metadata(value: metadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            metadata?: ReturnType<typeof metadata.prototype.toObject>;
        }): UpdateMetadataRequest {
            const message = new UpdateMetadataRequest({});
            if (data.metadata != null) {
                message.metadata = metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: ReturnType<typeof metadata.prototype.toObject>;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_metadata)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateMetadataRequest {
            return UpdateMetadataRequest.deserialize(bytes);
        }
    }
    export class EmailVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): EmailVerificationRequest {
            const message = new EmailVerificationRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailVerificationRequest {
            return EmailVerificationRequest.deserialize(bytes);
        }
    }
    export class ResetCodeVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resetCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resetCode" in data && data.resetCode != undefined) {
                    this.resetCode = data.resetCode;
                }
            }
        }
        get resetCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resetCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            resetCode?: string;
        }): ResetCodeVerificationRequest {
            const message = new ResetCodeVerificationRequest({});
            if (data.resetCode != null) {
                message.resetCode = data.resetCode;
            }
            return message;
        }
        toObject() {
            const data: {
                resetCode?: string;
            } = {};
            if (this.resetCode != null) {
                data.resetCode = this.resetCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resetCode.length)
                writer.writeString(1, this.resetCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetCodeVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetCodeVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resetCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetCodeVerificationRequest {
            return ResetCodeVerificationRequest.deserialize(bytes);
        }
    }
    export class ResetCodeVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): ResetCodeVerificationResponse {
            const message = new ResetCodeVerificationResponse({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetCodeVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetCodeVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetCodeVerificationResponse {
            return ResetCodeVerificationResponse.deserialize(bytes);
        }
    }
    export class GenerateResetCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): GenerateResetCodeRequest {
            const message = new GenerateResetCodeRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateResetCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateResetCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateResetCodeRequest {
            return GenerateResetCodeRequest.deserialize(bytes);
        }
    }
    export class ResetPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            resetCode?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("resetCode" in data && data.resetCode != undefined) {
                    this.resetCode = data.resetCode;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resetCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resetCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            resetCode?: string;
            newPassword?: string;
        }): ResetPasswordRequest {
            const message = new ResetPasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.resetCode != null) {
                message.resetCode = data.resetCode;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                resetCode?: string;
                newPassword?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.resetCode != null) {
                data.resetCode = this.resetCode;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.resetCode.length)
                writer.writeString(2, this.resetCode);
            if (this.newPassword.length)
                writer.writeString(3, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.resetCode = reader.readString();
                        break;
                    case 3:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest {
            return ResetPasswordRequest.deserialize(bytes);
        }
    }
    export class metadata extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
        constructor(data?: any[] | ({} & (({
            fullname?: string;
        }) | ({
            company?: string;
        }) | ({
            country?: string;
        }) | ({
            jobTitle?: string;
        }) | ({
            avatarPath?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("company" in data && data.company != undefined) {
                    this.company = data.company;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("jobTitle" in data && data.jobTitle != undefined) {
                    this.jobTitle = data.jobTitle;
                }
                if ("avatarPath" in data && data.avatarPath != undefined) {
                    this.avatarPath = data.avatarPath;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fullname(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_fullname() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get company() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set company(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_company() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_country() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get jobTitle() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set jobTitle(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_jobTitle() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get avatarPath() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set avatarPath(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_avatarPath() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _fullname() {
            const cases: {
                [index: number]: "none" | "fullname";
            } = {
                0: "none",
                1: "fullname"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _company() {
            const cases: {
                [index: number]: "none" | "company";
            } = {
                0: "none",
                2: "company"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _country() {
            const cases: {
                [index: number]: "none" | "country";
            } = {
                0: "none",
                3: "country"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _jobTitle() {
            const cases: {
                [index: number]: "none" | "jobTitle";
            } = {
                0: "none",
                4: "jobTitle"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _avatarPath() {
            const cases: {
                [index: number]: "none" | "avatarPath";
            } = {
                0: "none",
                5: "avatarPath"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            fullname?: string;
            company?: string;
            country?: string;
            jobTitle?: string;
            avatarPath?: string;
        }): metadata {
            const message = new metadata({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.company != null) {
                message.company = data.company;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.jobTitle != null) {
                message.jobTitle = data.jobTitle;
            }
            if (data.avatarPath != null) {
                message.avatarPath = data.avatarPath;
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                company?: string;
                country?: string;
                jobTitle?: string;
                avatarPath?: string;
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.company != null) {
                data.company = this.company;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.jobTitle != null) {
                data.jobTitle = this.jobTitle;
            }
            if (this.avatarPath != null) {
                data.avatarPath = this.avatarPath;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_fullname)
                writer.writeString(1, this.fullname);
            if (this.has_company)
                writer.writeString(2, this.company);
            if (this.has_country)
                writer.writeString(3, this.country);
            if (this.has_jobTitle)
                writer.writeString(4, this.jobTitle);
            if (this.has_avatarPath)
                writer.writeString(5, this.avatarPath);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        message.company = reader.readString();
                        break;
                    case 3:
                        message.country = reader.readString();
                        break;
                    case 4:
                        message.jobTitle = reader.readString();
                        break;
                    case 5:
                        message.avatarPath = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): metadata {
            return metadata.deserialize(bytes);
        }
    }
    export class ChangePasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oldPassword?: string;
            newPassword?: string;
            confirmNewPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oldPassword" in data && data.oldPassword != undefined) {
                    this.oldPassword = data.oldPassword;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
                if ("confirmNewPassword" in data && data.confirmNewPassword != undefined) {
                    this.confirmNewPassword = data.confirmNewPassword;
                }
            }
        }
        get oldPassword() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set oldPassword(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get confirmNewPassword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set confirmNewPassword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            oldPassword?: string;
            newPassword?: string;
            confirmNewPassword?: string;
        }): ChangePasswordRequest {
            const message = new ChangePasswordRequest({});
            if (data.oldPassword != null) {
                message.oldPassword = data.oldPassword;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            if (data.confirmNewPassword != null) {
                message.confirmNewPassword = data.confirmNewPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                oldPassword?: string;
                newPassword?: string;
                confirmNewPassword?: string;
            } = {};
            if (this.oldPassword != null) {
                data.oldPassword = this.oldPassword;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            if (this.confirmNewPassword != null) {
                data.confirmNewPassword = this.confirmNewPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oldPassword.length)
                writer.writeString(1, this.oldPassword);
            if (this.newPassword.length)
                writer.writeString(2, this.newPassword);
            if (this.confirmNewPassword.length)
                writer.writeString(3, this.confirmNewPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangePasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangePasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oldPassword = reader.readString();
                        break;
                    case 2:
                        message.newPassword = reader.readString();
                        break;
                    case 3:
                        message.confirmNewPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangePasswordRequest {
            return ChangePasswordRequest.deserialize(bytes);
        }
    }
    export abstract class UnimplementedBulbasaurService {
        static definition = {
            SignUp: {
                path: "/bulbasaur.Bulbasaur/SignUp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
            },
            SignIn: {
                path: "/bulbasaur.Bulbasaur/SignIn",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
            },
            RefreshToken: {
                path: "/bulbasaur.Bulbasaur/RefreshToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RefreshTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RefreshTokenResponse.deserialize(new Uint8Array(bytes))
            },
            ListUsers: {
                path: "/bulbasaur.Bulbasaur/ListUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListUsersResponse.deserialize(new Uint8Array(bytes))
            },
            EmailVerification: {
                path: "/bulbasaur.Bulbasaur/EmailVerification",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmailVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmailVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ResetCodeVerification: {
                path: "/bulbasaur.Bulbasaur/ResetCodeVerification",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResetCodeVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResetCodeVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResetCodeVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResetCodeVerificationResponse.deserialize(new Uint8Array(bytes))
            },
            GenerateResetCode: {
                path: "/bulbasaur.Bulbasaur/GenerateResetCode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateResetCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateResetCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ResetPassword: {
                path: "/bulbasaur.Bulbasaur/ResetPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResetPasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResetPasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.sendUnaryData<SignUpResponse>): void;
        abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.sendUnaryData<SignInResponse>): void;
        abstract RefreshToken(call: grpc_1.ServerUnaryCall<RefreshTokenRequest, RefreshTokenResponse>, callback: grpc_1.sendUnaryData<RefreshTokenResponse>): void;
        abstract ListUsers(call: grpc_1.ServerUnaryCall<ListUsersRequest, ListUsersResponse>, callback: grpc_1.sendUnaryData<ListUsersResponse>): void;
        abstract EmailVerification(call: grpc_1.ServerUnaryCall<EmailVerificationRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ResetCodeVerification(call: grpc_1.ServerUnaryCall<ResetCodeVerificationRequest, ResetCodeVerificationResponse>, callback: grpc_1.sendUnaryData<ResetCodeVerificationResponse>): void;
        abstract GenerateResetCode(call: grpc_1.ServerUnaryCall<GenerateResetCodeRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ResetPassword(call: grpc_1.ServerUnaryCall<ResetPasswordRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
    }
    export class BulbasaurClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static SignUp = new grpc_web_1.MethodDescriptor<SignUpRequest, SignUpResponse>("/bulbasaur.Bulbasaur/SignUp", grpc_web_1.MethodType.UNARY, SignUpRequest, SignUpResponse, (message: SignUpRequest) => message.serialize(), SignUpResponse.deserialize);
        SignUp(message: SignUpRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: SignUpResponse) => void) {
            return this._client.rpcCall<SignUpRequest, SignUpResponse>(this._address + "/bulbasaur.Bulbasaur/SignUp", message, metadata || {}, BulbasaurClient.SignUp, callback);
        }
        private static SignIn = new grpc_web_1.MethodDescriptor<SignInRequest, SignInResponse>("/bulbasaur.Bulbasaur/SignIn", grpc_web_1.MethodType.UNARY, SignInRequest, SignInResponse, (message: SignInRequest) => message.serialize(), SignInResponse.deserialize);
        SignIn(message: SignInRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: SignInResponse) => void) {
            return this._client.rpcCall<SignInRequest, SignInResponse>(this._address + "/bulbasaur.Bulbasaur/SignIn", message, metadata || {}, BulbasaurClient.SignIn, callback);
        }
        private static RefreshToken = new grpc_web_1.MethodDescriptor<RefreshTokenRequest, RefreshTokenResponse>("/bulbasaur.Bulbasaur/RefreshToken", grpc_web_1.MethodType.UNARY, RefreshTokenRequest, RefreshTokenResponse, (message: RefreshTokenRequest) => message.serialize(), RefreshTokenResponse.deserialize);
        RefreshToken(message: RefreshTokenRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: RefreshTokenResponse) => void) {
            return this._client.rpcCall<RefreshTokenRequest, RefreshTokenResponse>(this._address + "/bulbasaur.Bulbasaur/RefreshToken", message, metadata || {}, BulbasaurClient.RefreshToken, callback);
        }
        private static ListUsers = new grpc_web_1.MethodDescriptor<ListUsersRequest, ListUsersResponse>("/bulbasaur.Bulbasaur/ListUsers", grpc_web_1.MethodType.UNARY, ListUsersRequest, ListUsersResponse, (message: ListUsersRequest) => message.serialize(), ListUsersResponse.deserialize);
        ListUsers(message: ListUsersRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ListUsersResponse) => void) {
            return this._client.rpcCall<ListUsersRequest, ListUsersResponse>(this._address + "/bulbasaur.Bulbasaur/ListUsers", message, metadata || {}, BulbasaurClient.ListUsers, callback);
        }
        private static EmailVerification = new grpc_web_1.MethodDescriptor<EmailVerificationRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Bulbasaur/EmailVerification", grpc_web_1.MethodType.UNARY, EmailVerificationRequest, dependency_1.google.protobuf.Empty, (message: EmailVerificationRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        EmailVerification(message: EmailVerificationRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<EmailVerificationRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Bulbasaur/EmailVerification", message, metadata || {}, BulbasaurClient.EmailVerification, callback);
        }
        private static ResetCodeVerification = new grpc_web_1.MethodDescriptor<ResetCodeVerificationRequest, ResetCodeVerificationResponse>("/bulbasaur.Bulbasaur/ResetCodeVerification", grpc_web_1.MethodType.UNARY, ResetCodeVerificationRequest, ResetCodeVerificationResponse, (message: ResetCodeVerificationRequest) => message.serialize(), ResetCodeVerificationResponse.deserialize);
        ResetCodeVerification(message: ResetCodeVerificationRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ResetCodeVerificationResponse) => void) {
            return this._client.rpcCall<ResetCodeVerificationRequest, ResetCodeVerificationResponse>(this._address + "/bulbasaur.Bulbasaur/ResetCodeVerification", message, metadata || {}, BulbasaurClient.ResetCodeVerification, callback);
        }
        private static GenerateResetCode = new grpc_web_1.MethodDescriptor<GenerateResetCodeRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Bulbasaur/GenerateResetCode", grpc_web_1.MethodType.UNARY, GenerateResetCodeRequest, dependency_1.google.protobuf.Empty, (message: GenerateResetCodeRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        GenerateResetCode(message: GenerateResetCodeRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<GenerateResetCodeRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Bulbasaur/GenerateResetCode", message, metadata || {}, BulbasaurClient.GenerateResetCode, callback);
        }
        private static ResetPassword = new grpc_web_1.MethodDescriptor<ResetPasswordRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Bulbasaur/ResetPassword", grpc_web_1.MethodType.UNARY, ResetPasswordRequest, dependency_1.google.protobuf.Empty, (message: ResetPasswordRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        ResetPassword(message: ResetPasswordRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<ResetPasswordRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Bulbasaur/ResetPassword", message, metadata || {}, BulbasaurClient.ResetPassword, callback);
        }
    }
    export abstract class UnimplementedIvysaurService {
        static definition = {
            UpdateMetadata: {
                path: "/bulbasaur.Ivysaur/UpdateMetadata",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Me: {
                path: "/bulbasaur.Ivysaur/Me",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MeResponse.deserialize(new Uint8Array(bytes))
            },
            ChangePassword: {
                path: "/bulbasaur.Ivysaur/ChangePassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChangePasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChangePasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UpdateMetadata(call: grpc_1.ServerUnaryCall<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Me(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, MeResponse>, callback: grpc_1.sendUnaryData<MeResponse>): void;
        abstract ChangePassword(call: grpc_1.ServerUnaryCall<ChangePasswordRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
    }
    export class IvysaurClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static UpdateMetadata = new grpc_web_1.MethodDescriptor<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Ivysaur/UpdateMetadata", grpc_web_1.MethodType.UNARY, UpdateMetadataRequest, dependency_1.google.protobuf.Empty, (message: UpdateMetadataRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        UpdateMetadata(message: UpdateMetadataRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<UpdateMetadataRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Ivysaur/UpdateMetadata", message, metadata || {}, IvysaurClient.UpdateMetadata, callback);
        }
        private static Me = new grpc_web_1.MethodDescriptor<dependency_1.google.protobuf.Empty, MeResponse>("/bulbasaur.Ivysaur/Me", grpc_web_1.MethodType.UNARY, dependency_1.google.protobuf.Empty, MeResponse, (message: dependency_1.google.protobuf.Empty) => message.serialize(), MeResponse.deserialize);
        Me(message: dependency_1.google.protobuf.Empty, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: MeResponse) => void) {
            return this._client.rpcCall<dependency_1.google.protobuf.Empty, MeResponse>(this._address + "/bulbasaur.Ivysaur/Me", message, metadata || {}, IvysaurClient.Me, callback);
        }
        private static ChangePassword = new grpc_web_1.MethodDescriptor<ChangePasswordRequest, dependency_1.google.protobuf.Empty>("/bulbasaur.Ivysaur/ChangePassword", grpc_web_1.MethodType.UNARY, ChangePasswordRequest, dependency_1.google.protobuf.Empty, (message: ChangePasswordRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        ChangePassword(message: ChangePasswordRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<ChangePasswordRequest, dependency_1.google.protobuf.Empty>(this._address + "/bulbasaur.Ivysaur/ChangePassword", message, metadata || {}, IvysaurClient.ChangePassword, callback);
        }
    }
}
